// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages_robocup_ssl_geometry_legacy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryFieldSize {
    // message fields
    line_width: ::std::option::Option<i32>,
    field_length: ::std::option::Option<i32>,
    field_width: ::std::option::Option<i32>,
    boundary_width: ::std::option::Option<i32>,
    referee_width: ::std::option::Option<i32>,
    goal_width: ::std::option::Option<i32>,
    goal_depth: ::std::option::Option<i32>,
    goal_wall_width: ::std::option::Option<i32>,
    center_circle_radius: ::std::option::Option<i32>,
    defense_radius: ::std::option::Option<i32>,
    defense_stretch: ::std::option::Option<i32>,
    free_kick_from_defense_dist: ::std::option::Option<i32>,
    penalty_spot_from_field_line_dist: ::std::option::Option<i32>,
    penalty_line_from_spot_dist: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryFieldSize {
    fn default() -> &'a SSL_GeometryFieldSize {
        <SSL_GeometryFieldSize as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryFieldSize {
    pub fn new() -> SSL_GeometryFieldSize {
        ::std::default::Default::default()
    }

    // required int32 line_width = 1;


    pub fn get_line_width(&self) -> i32 {
        self.line_width.unwrap_or(0)
    }
    pub fn clear_line_width(&mut self) {
        self.line_width = ::std::option::Option::None;
    }

    pub fn has_line_width(&self) -> bool {
        self.line_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_line_width(&mut self, v: i32) {
        self.line_width = ::std::option::Option::Some(v);
    }

    // required int32 field_length = 2;


    pub fn get_field_length(&self) -> i32 {
        self.field_length.unwrap_or(0)
    }
    pub fn clear_field_length(&mut self) {
        self.field_length = ::std::option::Option::None;
    }

    pub fn has_field_length(&self) -> bool {
        self.field_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_length(&mut self, v: i32) {
        self.field_length = ::std::option::Option::Some(v);
    }

    // required int32 field_width = 3;


    pub fn get_field_width(&self) -> i32 {
        self.field_width.unwrap_or(0)
    }
    pub fn clear_field_width(&mut self) {
        self.field_width = ::std::option::Option::None;
    }

    pub fn has_field_width(&self) -> bool {
        self.field_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_width(&mut self, v: i32) {
        self.field_width = ::std::option::Option::Some(v);
    }

    // required int32 boundary_width = 4;


    pub fn get_boundary_width(&self) -> i32 {
        self.boundary_width.unwrap_or(0)
    }
    pub fn clear_boundary_width(&mut self) {
        self.boundary_width = ::std::option::Option::None;
    }

    pub fn has_boundary_width(&self) -> bool {
        self.boundary_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boundary_width(&mut self, v: i32) {
        self.boundary_width = ::std::option::Option::Some(v);
    }

    // required int32 referee_width = 5;


    pub fn get_referee_width(&self) -> i32 {
        self.referee_width.unwrap_or(0)
    }
    pub fn clear_referee_width(&mut self) {
        self.referee_width = ::std::option::Option::None;
    }

    pub fn has_referee_width(&self) -> bool {
        self.referee_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_referee_width(&mut self, v: i32) {
        self.referee_width = ::std::option::Option::Some(v);
    }

    // required int32 goal_width = 6;


    pub fn get_goal_width(&self) -> i32 {
        self.goal_width.unwrap_or(0)
    }
    pub fn clear_goal_width(&mut self) {
        self.goal_width = ::std::option::Option::None;
    }

    pub fn has_goal_width(&self) -> bool {
        self.goal_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_width(&mut self, v: i32) {
        self.goal_width = ::std::option::Option::Some(v);
    }

    // required int32 goal_depth = 7;


    pub fn get_goal_depth(&self) -> i32 {
        self.goal_depth.unwrap_or(0)
    }
    pub fn clear_goal_depth(&mut self) {
        self.goal_depth = ::std::option::Option::None;
    }

    pub fn has_goal_depth(&self) -> bool {
        self.goal_depth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_depth(&mut self, v: i32) {
        self.goal_depth = ::std::option::Option::Some(v);
    }

    // required int32 goal_wall_width = 8;


    pub fn get_goal_wall_width(&self) -> i32 {
        self.goal_wall_width.unwrap_or(0)
    }
    pub fn clear_goal_wall_width(&mut self) {
        self.goal_wall_width = ::std::option::Option::None;
    }

    pub fn has_goal_wall_width(&self) -> bool {
        self.goal_wall_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_wall_width(&mut self, v: i32) {
        self.goal_wall_width = ::std::option::Option::Some(v);
    }

    // required int32 center_circle_radius = 9;


    pub fn get_center_circle_radius(&self) -> i32 {
        self.center_circle_radius.unwrap_or(0)
    }
    pub fn clear_center_circle_radius(&mut self) {
        self.center_circle_radius = ::std::option::Option::None;
    }

    pub fn has_center_circle_radius(&self) -> bool {
        self.center_circle_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_center_circle_radius(&mut self, v: i32) {
        self.center_circle_radius = ::std::option::Option::Some(v);
    }

    // required int32 defense_radius = 10;


    pub fn get_defense_radius(&self) -> i32 {
        self.defense_radius.unwrap_or(0)
    }
    pub fn clear_defense_radius(&mut self) {
        self.defense_radius = ::std::option::Option::None;
    }

    pub fn has_defense_radius(&self) -> bool {
        self.defense_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_defense_radius(&mut self, v: i32) {
        self.defense_radius = ::std::option::Option::Some(v);
    }

    // required int32 defense_stretch = 11;


    pub fn get_defense_stretch(&self) -> i32 {
        self.defense_stretch.unwrap_or(0)
    }
    pub fn clear_defense_stretch(&mut self) {
        self.defense_stretch = ::std::option::Option::None;
    }

    pub fn has_defense_stretch(&self) -> bool {
        self.defense_stretch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_defense_stretch(&mut self, v: i32) {
        self.defense_stretch = ::std::option::Option::Some(v);
    }

    // required int32 free_kick_from_defense_dist = 12;


    pub fn get_free_kick_from_defense_dist(&self) -> i32 {
        self.free_kick_from_defense_dist.unwrap_or(0)
    }
    pub fn clear_free_kick_from_defense_dist(&mut self) {
        self.free_kick_from_defense_dist = ::std::option::Option::None;
    }

    pub fn has_free_kick_from_defense_dist(&self) -> bool {
        self.free_kick_from_defense_dist.is_some()
    }

    // Param is passed by value, moved
    pub fn set_free_kick_from_defense_dist(&mut self, v: i32) {
        self.free_kick_from_defense_dist = ::std::option::Option::Some(v);
    }

    // required int32 penalty_spot_from_field_line_dist = 13;


    pub fn get_penalty_spot_from_field_line_dist(&self) -> i32 {
        self.penalty_spot_from_field_line_dist.unwrap_or(0)
    }
    pub fn clear_penalty_spot_from_field_line_dist(&mut self) {
        self.penalty_spot_from_field_line_dist = ::std::option::Option::None;
    }

    pub fn has_penalty_spot_from_field_line_dist(&self) -> bool {
        self.penalty_spot_from_field_line_dist.is_some()
    }

    // Param is passed by value, moved
    pub fn set_penalty_spot_from_field_line_dist(&mut self, v: i32) {
        self.penalty_spot_from_field_line_dist = ::std::option::Option::Some(v);
    }

    // required int32 penalty_line_from_spot_dist = 14;


    pub fn get_penalty_line_from_spot_dist(&self) -> i32 {
        self.penalty_line_from_spot_dist.unwrap_or(0)
    }
    pub fn clear_penalty_line_from_spot_dist(&mut self) {
        self.penalty_line_from_spot_dist = ::std::option::Option::None;
    }

    pub fn has_penalty_line_from_spot_dist(&self) -> bool {
        self.penalty_line_from_spot_dist.is_some()
    }

    // Param is passed by value, moved
    pub fn set_penalty_line_from_spot_dist(&mut self, v: i32) {
        self.penalty_line_from_spot_dist = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_GeometryFieldSize {
    fn is_initialized(&self) -> bool {
        if self.line_width.is_none() {
            return false;
        }
        if self.field_length.is_none() {
            return false;
        }
        if self.field_width.is_none() {
            return false;
        }
        if self.boundary_width.is_none() {
            return false;
        }
        if self.referee_width.is_none() {
            return false;
        }
        if self.goal_width.is_none() {
            return false;
        }
        if self.goal_depth.is_none() {
            return false;
        }
        if self.goal_wall_width.is_none() {
            return false;
        }
        if self.center_circle_radius.is_none() {
            return false;
        }
        if self.defense_radius.is_none() {
            return false;
        }
        if self.defense_stretch.is_none() {
            return false;
        }
        if self.free_kick_from_defense_dist.is_none() {
            return false;
        }
        if self.penalty_spot_from_field_line_dist.is_none() {
            return false;
        }
        if self.penalty_line_from_spot_dist.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.line_width = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_length = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_width = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.boundary_width = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.referee_width = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_width = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_depth = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_wall_width = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.center_circle_radius = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.defense_radius = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.defense_stretch = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.free_kick_from_defense_dist = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.penalty_spot_from_field_line_dist = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.penalty_line_from_spot_dist = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.line_width {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_length {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_width {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.boundary_width {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.referee_width {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_width {
            my_size += ::protobuf::rt::value_size(6, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_depth {
            my_size += ::protobuf::rt::value_size(7, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_wall_width {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.center_circle_radius {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.defense_radius {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.defense_stretch {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.free_kick_from_defense_dist {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.penalty_spot_from_field_line_dist {
            my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.penalty_line_from_spot_dist {
            my_size += ::protobuf::rt::value_size(14, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.line_width {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.field_length {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.field_width {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.boundary_width {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.referee_width {
            os.write_int32(5, v)?;
        }
        if let Some(v) = self.goal_width {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.goal_depth {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.goal_wall_width {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.center_circle_radius {
            os.write_int32(9, v)?;
        }
        if let Some(v) = self.defense_radius {
            os.write_int32(10, v)?;
        }
        if let Some(v) = self.defense_stretch {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.free_kick_from_defense_dist {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.penalty_spot_from_field_line_dist {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.penalty_line_from_spot_dist {
            os.write_int32(14, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryFieldSize {
        SSL_GeometryFieldSize::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "line_width",
                |m: &SSL_GeometryFieldSize| { &m.line_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.line_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "field_length",
                |m: &SSL_GeometryFieldSize| { &m.field_length },
                |m: &mut SSL_GeometryFieldSize| { &mut m.field_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "field_width",
                |m: &SSL_GeometryFieldSize| { &m.field_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.field_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "boundary_width",
                |m: &SSL_GeometryFieldSize| { &m.boundary_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.boundary_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "referee_width",
                |m: &SSL_GeometryFieldSize| { &m.referee_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.referee_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_width",
                |m: &SSL_GeometryFieldSize| { &m.goal_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_depth",
                |m: &SSL_GeometryFieldSize| { &m.goal_depth },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_wall_width",
                |m: &SSL_GeometryFieldSize| { &m.goal_wall_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_wall_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "center_circle_radius",
                |m: &SSL_GeometryFieldSize| { &m.center_circle_radius },
                |m: &mut SSL_GeometryFieldSize| { &mut m.center_circle_radius },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "defense_radius",
                |m: &SSL_GeometryFieldSize| { &m.defense_radius },
                |m: &mut SSL_GeometryFieldSize| { &mut m.defense_radius },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "defense_stretch",
                |m: &SSL_GeometryFieldSize| { &m.defense_stretch },
                |m: &mut SSL_GeometryFieldSize| { &mut m.defense_stretch },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "free_kick_from_defense_dist",
                |m: &SSL_GeometryFieldSize| { &m.free_kick_from_defense_dist },
                |m: &mut SSL_GeometryFieldSize| { &mut m.free_kick_from_defense_dist },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "penalty_spot_from_field_line_dist",
                |m: &SSL_GeometryFieldSize| { &m.penalty_spot_from_field_line_dist },
                |m: &mut SSL_GeometryFieldSize| { &mut m.penalty_spot_from_field_line_dist },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "penalty_line_from_spot_dist",
                |m: &SSL_GeometryFieldSize| { &m.penalty_line_from_spot_dist },
                |m: &mut SSL_GeometryFieldSize| { &mut m.penalty_line_from_spot_dist },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_GeometryFieldSize>(
                "SSL_GeometryFieldSize",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_GeometryFieldSize {
        static instance: ::protobuf::rt::LazyV2<SSL_GeometryFieldSize> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_GeometryFieldSize::new)
    }
}

impl ::protobuf::Clear for SSL_GeometryFieldSize {
    fn clear(&mut self) {
        self.line_width = ::std::option::Option::None;
        self.field_length = ::std::option::Option::None;
        self.field_width = ::std::option::Option::None;
        self.boundary_width = ::std::option::Option::None;
        self.referee_width = ::std::option::Option::None;
        self.goal_width = ::std::option::Option::None;
        self.goal_depth = ::std::option::Option::None;
        self.goal_wall_width = ::std::option::Option::None;
        self.center_circle_radius = ::std::option::Option::None;
        self.defense_radius = ::std::option::Option::None;
        self.defense_stretch = ::std::option::Option::None;
        self.free_kick_from_defense_dist = ::std::option::Option::None;
        self.penalty_spot_from_field_line_dist = ::std::option::Option::None;
        self.penalty_line_from_spot_dist = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryFieldSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryFieldSize {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryData {
    // message fields
    pub field: ::protobuf::SingularPtrField<SSL_GeometryFieldSize>,
    pub calib: ::protobuf::RepeatedField<super::messages_robocup_ssl_geometry::SSL_GeometryCameraCalibration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryData {
    fn default() -> &'a SSL_GeometryData {
        <SSL_GeometryData as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryData {
    pub fn new() -> SSL_GeometryData {
        ::std::default::Default::default()
    }

    // required .RoboCup2014Legacy.Geometry.SSL_GeometryFieldSize field = 1;


    pub fn get_field(&self) -> &SSL_GeometryFieldSize {
        self.field.as_ref().unwrap_or_else(|| <SSL_GeometryFieldSize as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: SSL_GeometryFieldSize) {
        self.field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut SSL_GeometryFieldSize {
        if self.field.is_none() {
            self.field.set_default();
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> SSL_GeometryFieldSize {
        self.field.take().unwrap_or_else(|| SSL_GeometryFieldSize::new())
    }

    // repeated .SSL_GeometryCameraCalibration calib = 2;


    pub fn get_calib(&self) -> &[super::messages_robocup_ssl_geometry::SSL_GeometryCameraCalibration] {
        &self.calib
    }
    pub fn clear_calib(&mut self) {
        self.calib.clear();
    }

    // Param is passed by value, moved
    pub fn set_calib(&mut self, v: ::protobuf::RepeatedField<super::messages_robocup_ssl_geometry::SSL_GeometryCameraCalibration>) {
        self.calib = v;
    }

    // Mutable pointer to the field.
    pub fn mut_calib(&mut self) -> &mut ::protobuf::RepeatedField<super::messages_robocup_ssl_geometry::SSL_GeometryCameraCalibration> {
        &mut self.calib
    }

    // Take field
    pub fn take_calib(&mut self) -> ::protobuf::RepeatedField<super::messages_robocup_ssl_geometry::SSL_GeometryCameraCalibration> {
        ::std::mem::replace(&mut self.calib, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SSL_GeometryData {
    fn is_initialized(&self) -> bool {
        if self.field.is_none() {
            return false;
        }
        for v in &self.field {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.calib {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.calib)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.calib {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.calib {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryData {
        SSL_GeometryData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_GeometryFieldSize>>(
                "field",
                |m: &SSL_GeometryData| { &m.field },
                |m: &mut SSL_GeometryData| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::messages_robocup_ssl_geometry::SSL_GeometryCameraCalibration>>(
                "calib",
                |m: &SSL_GeometryData| { &m.calib },
                |m: &mut SSL_GeometryData| { &mut m.calib },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_GeometryData>(
                "SSL_GeometryData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_GeometryData {
        static instance: ::protobuf::rt::LazyV2<SSL_GeometryData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_GeometryData::new)
    }
}

impl ::protobuf::Clear for SSL_GeometryData {
    fn clear(&mut self) {
        self.field.clear();
        self.calib.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*messages_robocup_ssl_geometry_legacy.proto\x12\x1aRoboCup2014Legacy.G\
    eometry\x1a#messages_robocup_ssl_geometry.proto\"\x91\x05\n\x15SSL_Geome\
    tryFieldSize\x12\x1f\n\nline_width\x18\x01\x20\x02(\x05R\tlineWidthB\0\
    \x12#\n\x0cfield_length\x18\x02\x20\x02(\x05R\x0bfieldLengthB\0\x12!\n\
    \x0bfield_width\x18\x03\x20\x02(\x05R\nfieldWidthB\0\x12'\n\x0eboundary_\
    width\x18\x04\x20\x02(\x05R\rboundaryWidthB\0\x12%\n\rreferee_width\x18\
    \x05\x20\x02(\x05R\x0crefereeWidthB\0\x12\x1f\n\ngoal_width\x18\x06\x20\
    \x02(\x05R\tgoalWidthB\0\x12\x1f\n\ngoal_depth\x18\x07\x20\x02(\x05R\tgo\
    alDepthB\0\x12(\n\x0fgoal_wall_width\x18\x08\x20\x02(\x05R\rgoalWallWidt\
    hB\0\x122\n\x14center_circle_radius\x18\t\x20\x02(\x05R\x12centerCircleR\
    adiusB\0\x12'\n\x0edefense_radius\x18\n\x20\x02(\x05R\rdefenseRadiusB\0\
    \x12)\n\x0fdefense_stretch\x18\x0b\x20\x02(\x05R\x0edefenseStretchB\0\
    \x12>\n\x1bfree_kick_from_defense_dist\x18\x0c\x20\x02(\x05R\x17freeKick\
    FromDefenseDistB\0\x12I\n!penalty_spot_from_field_line_dist\x18\r\x20\
    \x02(\x05R\x1cpenaltySpotFromFieldLineDistB\0\x12>\n\x1bpenalty_line_fro\
    m_spot_dist\x18\x0e\x20\x02(\x05R\x17penaltyLineFromSpotDistB\0:\0\"\x97\
    \x01\n\x10SSL_GeometryData\x12I\n\x05field\x18\x01\x20\x02(\x0b21.RoboCu\
    p2014Legacy.Geometry.SSL_GeometryFieldSizeR\x05fieldB\0\x126\n\x05calib\
    \x18\x02\x20\x03(\x0b2\x1e.SSL_GeometryCameraCalibrationR\x05calibB\0:\0\
    B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
