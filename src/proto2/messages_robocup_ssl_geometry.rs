// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages_robocup_ssl_geometry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Vector2f {
    // message fields
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vector2f {
    fn default() -> &'a Vector2f {
        <Vector2f as ::protobuf::Message>::default_instance()
    }
}

impl Vector2f {
    pub fn new() -> Vector2f {
        ::std::default::Default::default()
    }

    // required float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Vector2f {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vector2f {
        Vector2f::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &Vector2f| { &m.x },
                |m: &mut Vector2f| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &Vector2f| { &m.y },
                |m: &mut Vector2f| { &mut m.y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vector2f>(
                "Vector2f",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vector2f {
        static instance: ::protobuf::rt::LazyV2<Vector2f> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vector2f::new)
    }
}

impl ::protobuf::Clear for Vector2f {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vector2f {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector2f {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_FieldLineSegment {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    pub p1: ::protobuf::SingularPtrField<Vector2f>,
    pub p2: ::protobuf::SingularPtrField<Vector2f>,
    thickness: ::std::option::Option<f32>,
    field_type: ::std::option::Option<SSL_FieldShapeType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_FieldLineSegment {
    fn default() -> &'a SSL_FieldLineSegment {
        <SSL_FieldLineSegment as ::protobuf::Message>::default_instance()
    }
}

impl SSL_FieldLineSegment {
    pub fn new() -> SSL_FieldLineSegment {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .Vector2f p1 = 2;


    pub fn get_p1(&self) -> &Vector2f {
        self.p1.as_ref().unwrap_or_else(|| <Vector2f as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p1(&mut self) {
        self.p1.clear();
    }

    pub fn has_p1(&self) -> bool {
        self.p1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p1(&mut self, v: Vector2f) {
        self.p1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p1(&mut self) -> &mut Vector2f {
        if self.p1.is_none() {
            self.p1.set_default();
        }
        self.p1.as_mut().unwrap()
    }

    // Take field
    pub fn take_p1(&mut self) -> Vector2f {
        self.p1.take().unwrap_or_else(|| Vector2f::new())
    }

    // required .Vector2f p2 = 3;


    pub fn get_p2(&self) -> &Vector2f {
        self.p2.as_ref().unwrap_or_else(|| <Vector2f as ::protobuf::Message>::default_instance())
    }
    pub fn clear_p2(&mut self) {
        self.p2.clear();
    }

    pub fn has_p2(&self) -> bool {
        self.p2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_p2(&mut self, v: Vector2f) {
        self.p2 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_p2(&mut self) -> &mut Vector2f {
        if self.p2.is_none() {
            self.p2.set_default();
        }
        self.p2.as_mut().unwrap()
    }

    // Take field
    pub fn take_p2(&mut self) -> Vector2f {
        self.p2.take().unwrap_or_else(|| Vector2f::new())
    }

    // required float thickness = 4;


    pub fn get_thickness(&self) -> f32 {
        self.thickness.unwrap_or(0.)
    }
    pub fn clear_thickness(&mut self) {
        self.thickness = ::std::option::Option::None;
    }

    pub fn has_thickness(&self) -> bool {
        self.thickness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thickness(&mut self, v: f32) {
        self.thickness = ::std::option::Option::Some(v);
    }

    // optional .SSL_FieldShapeType type = 5;


    pub fn get_field_type(&self) -> SSL_FieldShapeType {
        self.field_type.unwrap_or(SSL_FieldShapeType::Undefined)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SSL_FieldShapeType) {
        self.field_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_FieldLineSegment {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.p1.is_none() {
            return false;
        }
        if self.p2.is_none() {
            return false;
        }
        if self.thickness.is_none() {
            return false;
        }
        for v in &self.p1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.p2 {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p1)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.p2)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.thickness = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.p1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.p2.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.thickness {
            my_size += 5;
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.p1.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.p2.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.thickness {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_FieldLineSegment {
        SSL_FieldLineSegment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SSL_FieldLineSegment| { &m.name },
                |m: &mut SSL_FieldLineSegment| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2f>>(
                "p1",
                |m: &SSL_FieldLineSegment| { &m.p1 },
                |m: &mut SSL_FieldLineSegment| { &mut m.p1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2f>>(
                "p2",
                |m: &SSL_FieldLineSegment| { &m.p2 },
                |m: &mut SSL_FieldLineSegment| { &mut m.p2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "thickness",
                |m: &SSL_FieldLineSegment| { &m.thickness },
                |m: &mut SSL_FieldLineSegment| { &mut m.thickness },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SSL_FieldShapeType>>(
                "type",
                |m: &SSL_FieldLineSegment| { &m.field_type },
                |m: &mut SSL_FieldLineSegment| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_FieldLineSegment>(
                "SSL_FieldLineSegment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_FieldLineSegment {
        static instance: ::protobuf::rt::LazyV2<SSL_FieldLineSegment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_FieldLineSegment::new)
    }
}

impl ::protobuf::Clear for SSL_FieldLineSegment {
    fn clear(&mut self) {
        self.name.clear();
        self.p1.clear();
        self.p2.clear();
        self.thickness = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_FieldLineSegment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_FieldLineSegment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_FieldCircularArc {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    pub center: ::protobuf::SingularPtrField<Vector2f>,
    radius: ::std::option::Option<f32>,
    a1: ::std::option::Option<f32>,
    a2: ::std::option::Option<f32>,
    thickness: ::std::option::Option<f32>,
    field_type: ::std::option::Option<SSL_FieldShapeType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_FieldCircularArc {
    fn default() -> &'a SSL_FieldCircularArc {
        <SSL_FieldCircularArc as ::protobuf::Message>::default_instance()
    }
}

impl SSL_FieldCircularArc {
    pub fn new() -> SSL_FieldCircularArc {
        ::std::default::Default::default()
    }

    // required string name = 1;


    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .Vector2f center = 2;


    pub fn get_center(&self) -> &Vector2f {
        self.center.as_ref().unwrap_or_else(|| <Vector2f as ::protobuf::Message>::default_instance())
    }
    pub fn clear_center(&mut self) {
        self.center.clear();
    }

    pub fn has_center(&self) -> bool {
        self.center.is_some()
    }

    // Param is passed by value, moved
    pub fn set_center(&mut self, v: Vector2f) {
        self.center = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_center(&mut self) -> &mut Vector2f {
        if self.center.is_none() {
            self.center.set_default();
        }
        self.center.as_mut().unwrap()
    }

    // Take field
    pub fn take_center(&mut self) -> Vector2f {
        self.center.take().unwrap_or_else(|| Vector2f::new())
    }

    // required float radius = 3;


    pub fn get_radius(&self) -> f32 {
        self.radius.unwrap_or(0.)
    }
    pub fn clear_radius(&mut self) {
        self.radius = ::std::option::Option::None;
    }

    pub fn has_radius(&self) -> bool {
        self.radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius(&mut self, v: f32) {
        self.radius = ::std::option::Option::Some(v);
    }

    // required float a1 = 4;


    pub fn get_a1(&self) -> f32 {
        self.a1.unwrap_or(0.)
    }
    pub fn clear_a1(&mut self) {
        self.a1 = ::std::option::Option::None;
    }

    pub fn has_a1(&self) -> bool {
        self.a1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_a1(&mut self, v: f32) {
        self.a1 = ::std::option::Option::Some(v);
    }

    // required float a2 = 5;


    pub fn get_a2(&self) -> f32 {
        self.a2.unwrap_or(0.)
    }
    pub fn clear_a2(&mut self) {
        self.a2 = ::std::option::Option::None;
    }

    pub fn has_a2(&self) -> bool {
        self.a2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_a2(&mut self, v: f32) {
        self.a2 = ::std::option::Option::Some(v);
    }

    // required float thickness = 6;


    pub fn get_thickness(&self) -> f32 {
        self.thickness.unwrap_or(0.)
    }
    pub fn clear_thickness(&mut self) {
        self.thickness = ::std::option::Option::None;
    }

    pub fn has_thickness(&self) -> bool {
        self.thickness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_thickness(&mut self, v: f32) {
        self.thickness = ::std::option::Option::Some(v);
    }

    // optional .SSL_FieldShapeType type = 7;


    pub fn get_field_type(&self) -> SSL_FieldShapeType {
        self.field_type.unwrap_or(SSL_FieldShapeType::Undefined)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SSL_FieldShapeType) {
        self.field_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_FieldCircularArc {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.center.is_none() {
            return false;
        }
        if self.radius.is_none() {
            return false;
        }
        if self.a1.is_none() {
            return false;
        }
        if self.a2.is_none() {
            return false;
        }
        if self.thickness.is_none() {
            return false;
        }
        for v in &self.center {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.center)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.radius = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.a1 = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.a2 = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.thickness = ::std::option::Option::Some(tmp);
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.center.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.radius {
            my_size += 5;
        }
        if let Some(v) = self.a1 {
            my_size += 5;
        }
        if let Some(v) = self.a2 {
            my_size += 5;
        }
        if let Some(v) = self.thickness {
            my_size += 5;
        }
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.center.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.radius {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.a1 {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.a2 {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.thickness {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.field_type {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_FieldCircularArc {
        SSL_FieldCircularArc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SSL_FieldCircularArc| { &m.name },
                |m: &mut SSL_FieldCircularArc| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2f>>(
                "center",
                |m: &SSL_FieldCircularArc| { &m.center },
                |m: &mut SSL_FieldCircularArc| { &mut m.center },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "radius",
                |m: &SSL_FieldCircularArc| { &m.radius },
                |m: &mut SSL_FieldCircularArc| { &mut m.radius },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "a1",
                |m: &SSL_FieldCircularArc| { &m.a1 },
                |m: &mut SSL_FieldCircularArc| { &mut m.a1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "a2",
                |m: &SSL_FieldCircularArc| { &m.a2 },
                |m: &mut SSL_FieldCircularArc| { &mut m.a2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "thickness",
                |m: &SSL_FieldCircularArc| { &m.thickness },
                |m: &mut SSL_FieldCircularArc| { &mut m.thickness },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SSL_FieldShapeType>>(
                "type",
                |m: &SSL_FieldCircularArc| { &m.field_type },
                |m: &mut SSL_FieldCircularArc| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_FieldCircularArc>(
                "SSL_FieldCircularArc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_FieldCircularArc {
        static instance: ::protobuf::rt::LazyV2<SSL_FieldCircularArc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_FieldCircularArc::new)
    }
}

impl ::protobuf::Clear for SSL_FieldCircularArc {
    fn clear(&mut self) {
        self.name.clear();
        self.center.clear();
        self.radius = ::std::option::Option::None;
        self.a1 = ::std::option::Option::None;
        self.a2 = ::std::option::Option::None;
        self.thickness = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_FieldCircularArc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_FieldCircularArc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryFieldSize {
    // message fields
    field_length: ::std::option::Option<i32>,
    field_width: ::std::option::Option<i32>,
    goal_width: ::std::option::Option<i32>,
    goal_depth: ::std::option::Option<i32>,
    boundary_width: ::std::option::Option<i32>,
    pub field_lines: ::protobuf::RepeatedField<SSL_FieldLineSegment>,
    pub field_arcs: ::protobuf::RepeatedField<SSL_FieldCircularArc>,
    penalty_area_depth: ::std::option::Option<i32>,
    penalty_area_width: ::std::option::Option<i32>,
    center_circle_radius: ::std::option::Option<i32>,
    line_thickness: ::std::option::Option<i32>,
    goal_center_to_penalty_mark: ::std::option::Option<i32>,
    goal_height: ::std::option::Option<i32>,
    ball_radius: ::std::option::Option<f32>,
    max_robot_radius: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryFieldSize {
    fn default() -> &'a SSL_GeometryFieldSize {
        <SSL_GeometryFieldSize as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryFieldSize {
    pub fn new() -> SSL_GeometryFieldSize {
        ::std::default::Default::default()
    }

    // required int32 field_length = 1;


    pub fn get_field_length(&self) -> i32 {
        self.field_length.unwrap_or(0)
    }
    pub fn clear_field_length(&mut self) {
        self.field_length = ::std::option::Option::None;
    }

    pub fn has_field_length(&self) -> bool {
        self.field_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_length(&mut self, v: i32) {
        self.field_length = ::std::option::Option::Some(v);
    }

    // required int32 field_width = 2;


    pub fn get_field_width(&self) -> i32 {
        self.field_width.unwrap_or(0)
    }
    pub fn clear_field_width(&mut self) {
        self.field_width = ::std::option::Option::None;
    }

    pub fn has_field_width(&self) -> bool {
        self.field_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_width(&mut self, v: i32) {
        self.field_width = ::std::option::Option::Some(v);
    }

    // required int32 goal_width = 3;


    pub fn get_goal_width(&self) -> i32 {
        self.goal_width.unwrap_or(0)
    }
    pub fn clear_goal_width(&mut self) {
        self.goal_width = ::std::option::Option::None;
    }

    pub fn has_goal_width(&self) -> bool {
        self.goal_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_width(&mut self, v: i32) {
        self.goal_width = ::std::option::Option::Some(v);
    }

    // required int32 goal_depth = 4;


    pub fn get_goal_depth(&self) -> i32 {
        self.goal_depth.unwrap_or(0)
    }
    pub fn clear_goal_depth(&mut self) {
        self.goal_depth = ::std::option::Option::None;
    }

    pub fn has_goal_depth(&self) -> bool {
        self.goal_depth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_depth(&mut self, v: i32) {
        self.goal_depth = ::std::option::Option::Some(v);
    }

    // required int32 boundary_width = 5;


    pub fn get_boundary_width(&self) -> i32 {
        self.boundary_width.unwrap_or(0)
    }
    pub fn clear_boundary_width(&mut self) {
        self.boundary_width = ::std::option::Option::None;
    }

    pub fn has_boundary_width(&self) -> bool {
        self.boundary_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_boundary_width(&mut self, v: i32) {
        self.boundary_width = ::std::option::Option::Some(v);
    }

    // repeated .SSL_FieldLineSegment field_lines = 6;


    pub fn get_field_lines(&self) -> &[SSL_FieldLineSegment] {
        &self.field_lines
    }
    pub fn clear_field_lines(&mut self) {
        self.field_lines.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_lines(&mut self, v: ::protobuf::RepeatedField<SSL_FieldLineSegment>) {
        self.field_lines = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_lines(&mut self) -> &mut ::protobuf::RepeatedField<SSL_FieldLineSegment> {
        &mut self.field_lines
    }

    // Take field
    pub fn take_field_lines(&mut self) -> ::protobuf::RepeatedField<SSL_FieldLineSegment> {
        ::std::mem::replace(&mut self.field_lines, ::protobuf::RepeatedField::new())
    }

    // repeated .SSL_FieldCircularArc field_arcs = 7;


    pub fn get_field_arcs(&self) -> &[SSL_FieldCircularArc] {
        &self.field_arcs
    }
    pub fn clear_field_arcs(&mut self) {
        self.field_arcs.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_arcs(&mut self, v: ::protobuf::RepeatedField<SSL_FieldCircularArc>) {
        self.field_arcs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_arcs(&mut self) -> &mut ::protobuf::RepeatedField<SSL_FieldCircularArc> {
        &mut self.field_arcs
    }

    // Take field
    pub fn take_field_arcs(&mut self) -> ::protobuf::RepeatedField<SSL_FieldCircularArc> {
        ::std::mem::replace(&mut self.field_arcs, ::protobuf::RepeatedField::new())
    }

    // optional int32 penalty_area_depth = 8;


    pub fn get_penalty_area_depth(&self) -> i32 {
        self.penalty_area_depth.unwrap_or(0)
    }
    pub fn clear_penalty_area_depth(&mut self) {
        self.penalty_area_depth = ::std::option::Option::None;
    }

    pub fn has_penalty_area_depth(&self) -> bool {
        self.penalty_area_depth.is_some()
    }

    // Param is passed by value, moved
    pub fn set_penalty_area_depth(&mut self, v: i32) {
        self.penalty_area_depth = ::std::option::Option::Some(v);
    }

    // optional int32 penalty_area_width = 9;


    pub fn get_penalty_area_width(&self) -> i32 {
        self.penalty_area_width.unwrap_or(0)
    }
    pub fn clear_penalty_area_width(&mut self) {
        self.penalty_area_width = ::std::option::Option::None;
    }

    pub fn has_penalty_area_width(&self) -> bool {
        self.penalty_area_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_penalty_area_width(&mut self, v: i32) {
        self.penalty_area_width = ::std::option::Option::Some(v);
    }

    // optional int32 center_circle_radius = 10;


    pub fn get_center_circle_radius(&self) -> i32 {
        self.center_circle_radius.unwrap_or(0)
    }
    pub fn clear_center_circle_radius(&mut self) {
        self.center_circle_radius = ::std::option::Option::None;
    }

    pub fn has_center_circle_radius(&self) -> bool {
        self.center_circle_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_center_circle_radius(&mut self, v: i32) {
        self.center_circle_radius = ::std::option::Option::Some(v);
    }

    // optional int32 line_thickness = 11;


    pub fn get_line_thickness(&self) -> i32 {
        self.line_thickness.unwrap_or(0)
    }
    pub fn clear_line_thickness(&mut self) {
        self.line_thickness = ::std::option::Option::None;
    }

    pub fn has_line_thickness(&self) -> bool {
        self.line_thickness.is_some()
    }

    // Param is passed by value, moved
    pub fn set_line_thickness(&mut self, v: i32) {
        self.line_thickness = ::std::option::Option::Some(v);
    }

    // optional int32 goal_center_to_penalty_mark = 12;


    pub fn get_goal_center_to_penalty_mark(&self) -> i32 {
        self.goal_center_to_penalty_mark.unwrap_or(0)
    }
    pub fn clear_goal_center_to_penalty_mark(&mut self) {
        self.goal_center_to_penalty_mark = ::std::option::Option::None;
    }

    pub fn has_goal_center_to_penalty_mark(&self) -> bool {
        self.goal_center_to_penalty_mark.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_center_to_penalty_mark(&mut self, v: i32) {
        self.goal_center_to_penalty_mark = ::std::option::Option::Some(v);
    }

    // optional int32 goal_height = 13;


    pub fn get_goal_height(&self) -> i32 {
        self.goal_height.unwrap_or(0)
    }
    pub fn clear_goal_height(&mut self) {
        self.goal_height = ::std::option::Option::None;
    }

    pub fn has_goal_height(&self) -> bool {
        self.goal_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_goal_height(&mut self, v: i32) {
        self.goal_height = ::std::option::Option::Some(v);
    }

    // optional float ball_radius = 14;


    pub fn get_ball_radius(&self) -> f32 {
        self.ball_radius.unwrap_or(0.)
    }
    pub fn clear_ball_radius(&mut self) {
        self.ball_radius = ::std::option::Option::None;
    }

    pub fn has_ball_radius(&self) -> bool {
        self.ball_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ball_radius(&mut self, v: f32) {
        self.ball_radius = ::std::option::Option::Some(v);
    }

    // optional float max_robot_radius = 15;


    pub fn get_max_robot_radius(&self) -> f32 {
        self.max_robot_radius.unwrap_or(0.)
    }
    pub fn clear_max_robot_radius(&mut self) {
        self.max_robot_radius = ::std::option::Option::None;
    }

    pub fn has_max_robot_radius(&self) -> bool {
        self.max_robot_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_robot_radius(&mut self, v: f32) {
        self.max_robot_radius = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_GeometryFieldSize {
    fn is_initialized(&self) -> bool {
        if self.field_length.is_none() {
            return false;
        }
        if self.field_width.is_none() {
            return false;
        }
        if self.goal_width.is_none() {
            return false;
        }
        if self.goal_depth.is_none() {
            return false;
        }
        if self.boundary_width.is_none() {
            return false;
        }
        for v in &self.field_lines {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.field_arcs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_length = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_width = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_width = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_depth = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.boundary_width = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_lines)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_arcs)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.penalty_area_depth = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.penalty_area_width = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.center_circle_radius = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.line_thickness = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_center_to_penalty_mark = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.goal_height = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.ball_radius = ::std::option::Option::Some(tmp);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.max_robot_radius = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_length {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.field_width {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_width {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_depth {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.boundary_width {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.field_lines {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.field_arcs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.penalty_area_depth {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.penalty_area_width {
            my_size += ::protobuf::rt::value_size(9, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.center_circle_radius {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.line_thickness {
            my_size += ::protobuf::rt::value_size(11, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_center_to_penalty_mark {
            my_size += ::protobuf::rt::value_size(12, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.goal_height {
            my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.ball_radius {
            my_size += 5;
        }
        if let Some(v) = self.max_robot_radius {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_length {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.field_width {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.goal_width {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.goal_depth {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.boundary_width {
            os.write_int32(5, v)?;
        }
        for v in &self.field_lines {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.field_arcs {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.penalty_area_depth {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.penalty_area_width {
            os.write_int32(9, v)?;
        }
        if let Some(v) = self.center_circle_radius {
            os.write_int32(10, v)?;
        }
        if let Some(v) = self.line_thickness {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.goal_center_to_penalty_mark {
            os.write_int32(12, v)?;
        }
        if let Some(v) = self.goal_height {
            os.write_int32(13, v)?;
        }
        if let Some(v) = self.ball_radius {
            os.write_float(14, v)?;
        }
        if let Some(v) = self.max_robot_radius {
            os.write_float(15, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryFieldSize {
        SSL_GeometryFieldSize::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "field_length",
                |m: &SSL_GeometryFieldSize| { &m.field_length },
                |m: &mut SSL_GeometryFieldSize| { &mut m.field_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "field_width",
                |m: &SSL_GeometryFieldSize| { &m.field_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.field_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_width",
                |m: &SSL_GeometryFieldSize| { &m.goal_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_depth",
                |m: &SSL_GeometryFieldSize| { &m.goal_depth },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "boundary_width",
                |m: &SSL_GeometryFieldSize| { &m.boundary_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.boundary_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_FieldLineSegment>>(
                "field_lines",
                |m: &SSL_GeometryFieldSize| { &m.field_lines },
                |m: &mut SSL_GeometryFieldSize| { &mut m.field_lines },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_FieldCircularArc>>(
                "field_arcs",
                |m: &SSL_GeometryFieldSize| { &m.field_arcs },
                |m: &mut SSL_GeometryFieldSize| { &mut m.field_arcs },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "penalty_area_depth",
                |m: &SSL_GeometryFieldSize| { &m.penalty_area_depth },
                |m: &mut SSL_GeometryFieldSize| { &mut m.penalty_area_depth },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "penalty_area_width",
                |m: &SSL_GeometryFieldSize| { &m.penalty_area_width },
                |m: &mut SSL_GeometryFieldSize| { &mut m.penalty_area_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "center_circle_radius",
                |m: &SSL_GeometryFieldSize| { &m.center_circle_radius },
                |m: &mut SSL_GeometryFieldSize| { &mut m.center_circle_radius },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "line_thickness",
                |m: &SSL_GeometryFieldSize| { &m.line_thickness },
                |m: &mut SSL_GeometryFieldSize| { &mut m.line_thickness },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_center_to_penalty_mark",
                |m: &SSL_GeometryFieldSize| { &m.goal_center_to_penalty_mark },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_center_to_penalty_mark },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "goal_height",
                |m: &SSL_GeometryFieldSize| { &m.goal_height },
                |m: &mut SSL_GeometryFieldSize| { &mut m.goal_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "ball_radius",
                |m: &SSL_GeometryFieldSize| { &m.ball_radius },
                |m: &mut SSL_GeometryFieldSize| { &mut m.ball_radius },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "max_robot_radius",
                |m: &SSL_GeometryFieldSize| { &m.max_robot_radius },
                |m: &mut SSL_GeometryFieldSize| { &mut m.max_robot_radius },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_GeometryFieldSize>(
                "SSL_GeometryFieldSize",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_GeometryFieldSize {
        static instance: ::protobuf::rt::LazyV2<SSL_GeometryFieldSize> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_GeometryFieldSize::new)
    }
}

impl ::protobuf::Clear for SSL_GeometryFieldSize {
    fn clear(&mut self) {
        self.field_length = ::std::option::Option::None;
        self.field_width = ::std::option::Option::None;
        self.goal_width = ::std::option::Option::None;
        self.goal_depth = ::std::option::Option::None;
        self.boundary_width = ::std::option::Option::None;
        self.field_lines.clear();
        self.field_arcs.clear();
        self.penalty_area_depth = ::std::option::Option::None;
        self.penalty_area_width = ::std::option::Option::None;
        self.center_circle_radius = ::std::option::Option::None;
        self.line_thickness = ::std::option::Option::None;
        self.goal_center_to_penalty_mark = ::std::option::Option::None;
        self.goal_height = ::std::option::Option::None;
        self.ball_radius = ::std::option::Option::None;
        self.max_robot_radius = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryFieldSize {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryFieldSize {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryCameraCalibration {
    // message fields
    camera_id: ::std::option::Option<u32>,
    focal_length: ::std::option::Option<f32>,
    principal_point_x: ::std::option::Option<f32>,
    principal_point_y: ::std::option::Option<f32>,
    distortion: ::std::option::Option<f32>,
    q0: ::std::option::Option<f32>,
    q1: ::std::option::Option<f32>,
    q2: ::std::option::Option<f32>,
    q3: ::std::option::Option<f32>,
    tx: ::std::option::Option<f32>,
    ty: ::std::option::Option<f32>,
    tz: ::std::option::Option<f32>,
    derived_camera_world_tx: ::std::option::Option<f32>,
    derived_camera_world_ty: ::std::option::Option<f32>,
    derived_camera_world_tz: ::std::option::Option<f32>,
    pixel_image_width: ::std::option::Option<u32>,
    pixel_image_height: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryCameraCalibration {
    fn default() -> &'a SSL_GeometryCameraCalibration {
        <SSL_GeometryCameraCalibration as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryCameraCalibration {
    pub fn new() -> SSL_GeometryCameraCalibration {
        ::std::default::Default::default()
    }

    // required uint32 camera_id = 1;


    pub fn get_camera_id(&self) -> u32 {
        self.camera_id.unwrap_or(0)
    }
    pub fn clear_camera_id(&mut self) {
        self.camera_id = ::std::option::Option::None;
    }

    pub fn has_camera_id(&self) -> bool {
        self.camera_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_camera_id(&mut self, v: u32) {
        self.camera_id = ::std::option::Option::Some(v);
    }

    // required float focal_length = 2;


    pub fn get_focal_length(&self) -> f32 {
        self.focal_length.unwrap_or(0.)
    }
    pub fn clear_focal_length(&mut self) {
        self.focal_length = ::std::option::Option::None;
    }

    pub fn has_focal_length(&self) -> bool {
        self.focal_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_focal_length(&mut self, v: f32) {
        self.focal_length = ::std::option::Option::Some(v);
    }

    // required float principal_point_x = 3;


    pub fn get_principal_point_x(&self) -> f32 {
        self.principal_point_x.unwrap_or(0.)
    }
    pub fn clear_principal_point_x(&mut self) {
        self.principal_point_x = ::std::option::Option::None;
    }

    pub fn has_principal_point_x(&self) -> bool {
        self.principal_point_x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_principal_point_x(&mut self, v: f32) {
        self.principal_point_x = ::std::option::Option::Some(v);
    }

    // required float principal_point_y = 4;


    pub fn get_principal_point_y(&self) -> f32 {
        self.principal_point_y.unwrap_or(0.)
    }
    pub fn clear_principal_point_y(&mut self) {
        self.principal_point_y = ::std::option::Option::None;
    }

    pub fn has_principal_point_y(&self) -> bool {
        self.principal_point_y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_principal_point_y(&mut self, v: f32) {
        self.principal_point_y = ::std::option::Option::Some(v);
    }

    // required float distortion = 5;


    pub fn get_distortion(&self) -> f32 {
        self.distortion.unwrap_or(0.)
    }
    pub fn clear_distortion(&mut self) {
        self.distortion = ::std::option::Option::None;
    }

    pub fn has_distortion(&self) -> bool {
        self.distortion.is_some()
    }

    // Param is passed by value, moved
    pub fn set_distortion(&mut self, v: f32) {
        self.distortion = ::std::option::Option::Some(v);
    }

    // required float q0 = 6;


    pub fn get_q0(&self) -> f32 {
        self.q0.unwrap_or(0.)
    }
    pub fn clear_q0(&mut self) {
        self.q0 = ::std::option::Option::None;
    }

    pub fn has_q0(&self) -> bool {
        self.q0.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q0(&mut self, v: f32) {
        self.q0 = ::std::option::Option::Some(v);
    }

    // required float q1 = 7;


    pub fn get_q1(&self) -> f32 {
        self.q1.unwrap_or(0.)
    }
    pub fn clear_q1(&mut self) {
        self.q1 = ::std::option::Option::None;
    }

    pub fn has_q1(&self) -> bool {
        self.q1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q1(&mut self, v: f32) {
        self.q1 = ::std::option::Option::Some(v);
    }

    // required float q2 = 8;


    pub fn get_q2(&self) -> f32 {
        self.q2.unwrap_or(0.)
    }
    pub fn clear_q2(&mut self) {
        self.q2 = ::std::option::Option::None;
    }

    pub fn has_q2(&self) -> bool {
        self.q2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q2(&mut self, v: f32) {
        self.q2 = ::std::option::Option::Some(v);
    }

    // required float q3 = 9;


    pub fn get_q3(&self) -> f32 {
        self.q3.unwrap_or(0.)
    }
    pub fn clear_q3(&mut self) {
        self.q3 = ::std::option::Option::None;
    }

    pub fn has_q3(&self) -> bool {
        self.q3.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q3(&mut self, v: f32) {
        self.q3 = ::std::option::Option::Some(v);
    }

    // required float tx = 10;


    pub fn get_tx(&self) -> f32 {
        self.tx.unwrap_or(0.)
    }
    pub fn clear_tx(&mut self) {
        self.tx = ::std::option::Option::None;
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: f32) {
        self.tx = ::std::option::Option::Some(v);
    }

    // required float ty = 11;


    pub fn get_ty(&self) -> f32 {
        self.ty.unwrap_or(0.)
    }
    pub fn clear_ty(&mut self) {
        self.ty = ::std::option::Option::None;
    }

    pub fn has_ty(&self) -> bool {
        self.ty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ty(&mut self, v: f32) {
        self.ty = ::std::option::Option::Some(v);
    }

    // required float tz = 12;


    pub fn get_tz(&self) -> f32 {
        self.tz.unwrap_or(0.)
    }
    pub fn clear_tz(&mut self) {
        self.tz = ::std::option::Option::None;
    }

    pub fn has_tz(&self) -> bool {
        self.tz.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tz(&mut self, v: f32) {
        self.tz = ::std::option::Option::Some(v);
    }

    // optional float derived_camera_world_tx = 13;


    pub fn get_derived_camera_world_tx(&self) -> f32 {
        self.derived_camera_world_tx.unwrap_or(0.)
    }
    pub fn clear_derived_camera_world_tx(&mut self) {
        self.derived_camera_world_tx = ::std::option::Option::None;
    }

    pub fn has_derived_camera_world_tx(&self) -> bool {
        self.derived_camera_world_tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_camera_world_tx(&mut self, v: f32) {
        self.derived_camera_world_tx = ::std::option::Option::Some(v);
    }

    // optional float derived_camera_world_ty = 14;


    pub fn get_derived_camera_world_ty(&self) -> f32 {
        self.derived_camera_world_ty.unwrap_or(0.)
    }
    pub fn clear_derived_camera_world_ty(&mut self) {
        self.derived_camera_world_ty = ::std::option::Option::None;
    }

    pub fn has_derived_camera_world_ty(&self) -> bool {
        self.derived_camera_world_ty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_camera_world_ty(&mut self, v: f32) {
        self.derived_camera_world_ty = ::std::option::Option::Some(v);
    }

    // optional float derived_camera_world_tz = 15;


    pub fn get_derived_camera_world_tz(&self) -> f32 {
        self.derived_camera_world_tz.unwrap_or(0.)
    }
    pub fn clear_derived_camera_world_tz(&mut self) {
        self.derived_camera_world_tz = ::std::option::Option::None;
    }

    pub fn has_derived_camera_world_tz(&self) -> bool {
        self.derived_camera_world_tz.is_some()
    }

    // Param is passed by value, moved
    pub fn set_derived_camera_world_tz(&mut self, v: f32) {
        self.derived_camera_world_tz = ::std::option::Option::Some(v);
    }

    // optional uint32 pixel_image_width = 16;


    pub fn get_pixel_image_width(&self) -> u32 {
        self.pixel_image_width.unwrap_or(0)
    }
    pub fn clear_pixel_image_width(&mut self) {
        self.pixel_image_width = ::std::option::Option::None;
    }

    pub fn has_pixel_image_width(&self) -> bool {
        self.pixel_image_width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pixel_image_width(&mut self, v: u32) {
        self.pixel_image_width = ::std::option::Option::Some(v);
    }

    // optional uint32 pixel_image_height = 17;


    pub fn get_pixel_image_height(&self) -> u32 {
        self.pixel_image_height.unwrap_or(0)
    }
    pub fn clear_pixel_image_height(&mut self) {
        self.pixel_image_height = ::std::option::Option::None;
    }

    pub fn has_pixel_image_height(&self) -> bool {
        self.pixel_image_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pixel_image_height(&mut self, v: u32) {
        self.pixel_image_height = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_GeometryCameraCalibration {
    fn is_initialized(&self) -> bool {
        if self.camera_id.is_none() {
            return false;
        }
        if self.focal_length.is_none() {
            return false;
        }
        if self.principal_point_x.is_none() {
            return false;
        }
        if self.principal_point_y.is_none() {
            return false;
        }
        if self.distortion.is_none() {
            return false;
        }
        if self.q0.is_none() {
            return false;
        }
        if self.q1.is_none() {
            return false;
        }
        if self.q2.is_none() {
            return false;
        }
        if self.q3.is_none() {
            return false;
        }
        if self.tx.is_none() {
            return false;
        }
        if self.ty.is_none() {
            return false;
        }
        if self.tz.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.camera_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.focal_length = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.principal_point_x = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.principal_point_y = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.distortion = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q0 = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q1 = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q2 = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.q3 = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.tx = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.ty = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.tz = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.derived_camera_world_tx = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.derived_camera_world_ty = ::std::option::Option::Some(tmp);
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.derived_camera_world_tz = ::std::option::Option::Some(tmp);
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pixel_image_width = ::std::option::Option::Some(tmp);
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pixel_image_height = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.camera_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.focal_length {
            my_size += 5;
        }
        if let Some(v) = self.principal_point_x {
            my_size += 5;
        }
        if let Some(v) = self.principal_point_y {
            my_size += 5;
        }
        if let Some(v) = self.distortion {
            my_size += 5;
        }
        if let Some(v) = self.q0 {
            my_size += 5;
        }
        if let Some(v) = self.q1 {
            my_size += 5;
        }
        if let Some(v) = self.q2 {
            my_size += 5;
        }
        if let Some(v) = self.q3 {
            my_size += 5;
        }
        if let Some(v) = self.tx {
            my_size += 5;
        }
        if let Some(v) = self.ty {
            my_size += 5;
        }
        if let Some(v) = self.tz {
            my_size += 5;
        }
        if let Some(v) = self.derived_camera_world_tx {
            my_size += 5;
        }
        if let Some(v) = self.derived_camera_world_ty {
            my_size += 5;
        }
        if let Some(v) = self.derived_camera_world_tz {
            my_size += 5;
        }
        if let Some(v) = self.pixel_image_width {
            my_size += ::protobuf::rt::value_size(16, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.pixel_image_height {
            my_size += ::protobuf::rt::value_size(17, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.camera_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.focal_length {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.principal_point_x {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.principal_point_y {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.distortion {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.q0 {
            os.write_float(6, v)?;
        }
        if let Some(v) = self.q1 {
            os.write_float(7, v)?;
        }
        if let Some(v) = self.q2 {
            os.write_float(8, v)?;
        }
        if let Some(v) = self.q3 {
            os.write_float(9, v)?;
        }
        if let Some(v) = self.tx {
            os.write_float(10, v)?;
        }
        if let Some(v) = self.ty {
            os.write_float(11, v)?;
        }
        if let Some(v) = self.tz {
            os.write_float(12, v)?;
        }
        if let Some(v) = self.derived_camera_world_tx {
            os.write_float(13, v)?;
        }
        if let Some(v) = self.derived_camera_world_ty {
            os.write_float(14, v)?;
        }
        if let Some(v) = self.derived_camera_world_tz {
            os.write_float(15, v)?;
        }
        if let Some(v) = self.pixel_image_width {
            os.write_uint32(16, v)?;
        }
        if let Some(v) = self.pixel_image_height {
            os.write_uint32(17, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryCameraCalibration {
        SSL_GeometryCameraCalibration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "camera_id",
                |m: &SSL_GeometryCameraCalibration| { &m.camera_id },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.camera_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "focal_length",
                |m: &SSL_GeometryCameraCalibration| { &m.focal_length },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.focal_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "principal_point_x",
                |m: &SSL_GeometryCameraCalibration| { &m.principal_point_x },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.principal_point_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "principal_point_y",
                |m: &SSL_GeometryCameraCalibration| { &m.principal_point_y },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.principal_point_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "distortion",
                |m: &SSL_GeometryCameraCalibration| { &m.distortion },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.distortion },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "q0",
                |m: &SSL_GeometryCameraCalibration| { &m.q0 },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.q0 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "q1",
                |m: &SSL_GeometryCameraCalibration| { &m.q1 },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.q1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "q2",
                |m: &SSL_GeometryCameraCalibration| { &m.q2 },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.q2 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "q3",
                |m: &SSL_GeometryCameraCalibration| { &m.q3 },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.q3 },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "tx",
                |m: &SSL_GeometryCameraCalibration| { &m.tx },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "ty",
                |m: &SSL_GeometryCameraCalibration| { &m.ty },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.ty },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "tz",
                |m: &SSL_GeometryCameraCalibration| { &m.tz },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.tz },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "derived_camera_world_tx",
                |m: &SSL_GeometryCameraCalibration| { &m.derived_camera_world_tx },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.derived_camera_world_tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "derived_camera_world_ty",
                |m: &SSL_GeometryCameraCalibration| { &m.derived_camera_world_ty },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.derived_camera_world_ty },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "derived_camera_world_tz",
                |m: &SSL_GeometryCameraCalibration| { &m.derived_camera_world_tz },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.derived_camera_world_tz },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "pixel_image_width",
                |m: &SSL_GeometryCameraCalibration| { &m.pixel_image_width },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.pixel_image_width },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "pixel_image_height",
                |m: &SSL_GeometryCameraCalibration| { &m.pixel_image_height },
                |m: &mut SSL_GeometryCameraCalibration| { &mut m.pixel_image_height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_GeometryCameraCalibration>(
                "SSL_GeometryCameraCalibration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_GeometryCameraCalibration {
        static instance: ::protobuf::rt::LazyV2<SSL_GeometryCameraCalibration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_GeometryCameraCalibration::new)
    }
}

impl ::protobuf::Clear for SSL_GeometryCameraCalibration {
    fn clear(&mut self) {
        self.camera_id = ::std::option::Option::None;
        self.focal_length = ::std::option::Option::None;
        self.principal_point_x = ::std::option::Option::None;
        self.principal_point_y = ::std::option::Option::None;
        self.distortion = ::std::option::Option::None;
        self.q0 = ::std::option::Option::None;
        self.q1 = ::std::option::Option::None;
        self.q2 = ::std::option::Option::None;
        self.q3 = ::std::option::Option::None;
        self.tx = ::std::option::Option::None;
        self.ty = ::std::option::Option::None;
        self.tz = ::std::option::Option::None;
        self.derived_camera_world_tx = ::std::option::Option::None;
        self.derived_camera_world_ty = ::std::option::Option::None;
        self.derived_camera_world_tz = ::std::option::Option::None;
        self.pixel_image_width = ::std::option::Option::None;
        self.pixel_image_height = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryCameraCalibration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryCameraCalibration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_BallModelStraightTwoPhase {
    // message fields
    acc_slide: ::std::option::Option<f64>,
    acc_roll: ::std::option::Option<f64>,
    k_switch: ::std::option::Option<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_BallModelStraightTwoPhase {
    fn default() -> &'a SSL_BallModelStraightTwoPhase {
        <SSL_BallModelStraightTwoPhase as ::protobuf::Message>::default_instance()
    }
}

impl SSL_BallModelStraightTwoPhase {
    pub fn new() -> SSL_BallModelStraightTwoPhase {
        ::std::default::Default::default()
    }

    // required double acc_slide = 1;


    pub fn get_acc_slide(&self) -> f64 {
        self.acc_slide.unwrap_or(0.)
    }
    pub fn clear_acc_slide(&mut self) {
        self.acc_slide = ::std::option::Option::None;
    }

    pub fn has_acc_slide(&self) -> bool {
        self.acc_slide.is_some()
    }

    // Param is passed by value, moved
    pub fn set_acc_slide(&mut self, v: f64) {
        self.acc_slide = ::std::option::Option::Some(v);
    }

    // required double acc_roll = 2;


    pub fn get_acc_roll(&self) -> f64 {
        self.acc_roll.unwrap_or(0.)
    }
    pub fn clear_acc_roll(&mut self) {
        self.acc_roll = ::std::option::Option::None;
    }

    pub fn has_acc_roll(&self) -> bool {
        self.acc_roll.is_some()
    }

    // Param is passed by value, moved
    pub fn set_acc_roll(&mut self, v: f64) {
        self.acc_roll = ::std::option::Option::Some(v);
    }

    // required double k_switch = 3;


    pub fn get_k_switch(&self) -> f64 {
        self.k_switch.unwrap_or(0.)
    }
    pub fn clear_k_switch(&mut self) {
        self.k_switch = ::std::option::Option::None;
    }

    pub fn has_k_switch(&self) -> bool {
        self.k_switch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_k_switch(&mut self, v: f64) {
        self.k_switch = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_BallModelStraightTwoPhase {
    fn is_initialized(&self) -> bool {
        if self.acc_slide.is_none() {
            return false;
        }
        if self.acc_roll.is_none() {
            return false;
        }
        if self.k_switch.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acc_slide = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.acc_roll = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.k_switch = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.acc_slide {
            my_size += 9;
        }
        if let Some(v) = self.acc_roll {
            my_size += 9;
        }
        if let Some(v) = self.k_switch {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.acc_slide {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.acc_roll {
            os.write_double(2, v)?;
        }
        if let Some(v) = self.k_switch {
            os.write_double(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_BallModelStraightTwoPhase {
        SSL_BallModelStraightTwoPhase::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "acc_slide",
                |m: &SSL_BallModelStraightTwoPhase| { &m.acc_slide },
                |m: &mut SSL_BallModelStraightTwoPhase| { &mut m.acc_slide },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "acc_roll",
                |m: &SSL_BallModelStraightTwoPhase| { &m.acc_roll },
                |m: &mut SSL_BallModelStraightTwoPhase| { &mut m.acc_roll },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "k_switch",
                |m: &SSL_BallModelStraightTwoPhase| { &m.k_switch },
                |m: &mut SSL_BallModelStraightTwoPhase| { &mut m.k_switch },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_BallModelStraightTwoPhase>(
                "SSL_BallModelStraightTwoPhase",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_BallModelStraightTwoPhase {
        static instance: ::protobuf::rt::LazyV2<SSL_BallModelStraightTwoPhase> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_BallModelStraightTwoPhase::new)
    }
}

impl ::protobuf::Clear for SSL_BallModelStraightTwoPhase {
    fn clear(&mut self) {
        self.acc_slide = ::std::option::Option::None;
        self.acc_roll = ::std::option::Option::None;
        self.k_switch = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_BallModelStraightTwoPhase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_BallModelStraightTwoPhase {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_BallModelChipFixedLoss {
    // message fields
    damping_xy_first_hop: ::std::option::Option<f64>,
    damping_xy_other_hops: ::std::option::Option<f64>,
    damping_z: ::std::option::Option<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_BallModelChipFixedLoss {
    fn default() -> &'a SSL_BallModelChipFixedLoss {
        <SSL_BallModelChipFixedLoss as ::protobuf::Message>::default_instance()
    }
}

impl SSL_BallModelChipFixedLoss {
    pub fn new() -> SSL_BallModelChipFixedLoss {
        ::std::default::Default::default()
    }

    // required double damping_xy_first_hop = 1;


    pub fn get_damping_xy_first_hop(&self) -> f64 {
        self.damping_xy_first_hop.unwrap_or(0.)
    }
    pub fn clear_damping_xy_first_hop(&mut self) {
        self.damping_xy_first_hop = ::std::option::Option::None;
    }

    pub fn has_damping_xy_first_hop(&self) -> bool {
        self.damping_xy_first_hop.is_some()
    }

    // Param is passed by value, moved
    pub fn set_damping_xy_first_hop(&mut self, v: f64) {
        self.damping_xy_first_hop = ::std::option::Option::Some(v);
    }

    // required double damping_xy_other_hops = 2;


    pub fn get_damping_xy_other_hops(&self) -> f64 {
        self.damping_xy_other_hops.unwrap_or(0.)
    }
    pub fn clear_damping_xy_other_hops(&mut self) {
        self.damping_xy_other_hops = ::std::option::Option::None;
    }

    pub fn has_damping_xy_other_hops(&self) -> bool {
        self.damping_xy_other_hops.is_some()
    }

    // Param is passed by value, moved
    pub fn set_damping_xy_other_hops(&mut self, v: f64) {
        self.damping_xy_other_hops = ::std::option::Option::Some(v);
    }

    // required double damping_z = 3;


    pub fn get_damping_z(&self) -> f64 {
        self.damping_z.unwrap_or(0.)
    }
    pub fn clear_damping_z(&mut self) {
        self.damping_z = ::std::option::Option::None;
    }

    pub fn has_damping_z(&self) -> bool {
        self.damping_z.is_some()
    }

    // Param is passed by value, moved
    pub fn set_damping_z(&mut self, v: f64) {
        self.damping_z = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for SSL_BallModelChipFixedLoss {
    fn is_initialized(&self) -> bool {
        if self.damping_xy_first_hop.is_none() {
            return false;
        }
        if self.damping_xy_other_hops.is_none() {
            return false;
        }
        if self.damping_z.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.damping_xy_first_hop = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.damping_xy_other_hops = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.damping_z = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.damping_xy_first_hop {
            my_size += 9;
        }
        if let Some(v) = self.damping_xy_other_hops {
            my_size += 9;
        }
        if let Some(v) = self.damping_z {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.damping_xy_first_hop {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.damping_xy_other_hops {
            os.write_double(2, v)?;
        }
        if let Some(v) = self.damping_z {
            os.write_double(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_BallModelChipFixedLoss {
        SSL_BallModelChipFixedLoss::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "damping_xy_first_hop",
                |m: &SSL_BallModelChipFixedLoss| { &m.damping_xy_first_hop },
                |m: &mut SSL_BallModelChipFixedLoss| { &mut m.damping_xy_first_hop },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "damping_xy_other_hops",
                |m: &SSL_BallModelChipFixedLoss| { &m.damping_xy_other_hops },
                |m: &mut SSL_BallModelChipFixedLoss| { &mut m.damping_xy_other_hops },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "damping_z",
                |m: &SSL_BallModelChipFixedLoss| { &m.damping_z },
                |m: &mut SSL_BallModelChipFixedLoss| { &mut m.damping_z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_BallModelChipFixedLoss>(
                "SSL_BallModelChipFixedLoss",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_BallModelChipFixedLoss {
        static instance: ::protobuf::rt::LazyV2<SSL_BallModelChipFixedLoss> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_BallModelChipFixedLoss::new)
    }
}

impl ::protobuf::Clear for SSL_BallModelChipFixedLoss {
    fn clear(&mut self) {
        self.damping_xy_first_hop = ::std::option::Option::None;
        self.damping_xy_other_hops = ::std::option::Option::None;
        self.damping_z = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_BallModelChipFixedLoss {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_BallModelChipFixedLoss {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryModels {
    // message fields
    pub straight_two_phase: ::protobuf::SingularPtrField<SSL_BallModelStraightTwoPhase>,
    pub chip_fixed_loss: ::protobuf::SingularPtrField<SSL_BallModelChipFixedLoss>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryModels {
    fn default() -> &'a SSL_GeometryModels {
        <SSL_GeometryModels as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryModels {
    pub fn new() -> SSL_GeometryModels {
        ::std::default::Default::default()
    }

    // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;


    pub fn get_straight_two_phase(&self) -> &SSL_BallModelStraightTwoPhase {
        self.straight_two_phase.as_ref().unwrap_or_else(|| <SSL_BallModelStraightTwoPhase as ::protobuf::Message>::default_instance())
    }
    pub fn clear_straight_two_phase(&mut self) {
        self.straight_two_phase.clear();
    }

    pub fn has_straight_two_phase(&self) -> bool {
        self.straight_two_phase.is_some()
    }

    // Param is passed by value, moved
    pub fn set_straight_two_phase(&mut self, v: SSL_BallModelStraightTwoPhase) {
        self.straight_two_phase = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_straight_two_phase(&mut self) -> &mut SSL_BallModelStraightTwoPhase {
        if self.straight_two_phase.is_none() {
            self.straight_two_phase.set_default();
        }
        self.straight_two_phase.as_mut().unwrap()
    }

    // Take field
    pub fn take_straight_two_phase(&mut self) -> SSL_BallModelStraightTwoPhase {
        self.straight_two_phase.take().unwrap_or_else(|| SSL_BallModelStraightTwoPhase::new())
    }

    // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;


    pub fn get_chip_fixed_loss(&self) -> &SSL_BallModelChipFixedLoss {
        self.chip_fixed_loss.as_ref().unwrap_or_else(|| <SSL_BallModelChipFixedLoss as ::protobuf::Message>::default_instance())
    }
    pub fn clear_chip_fixed_loss(&mut self) {
        self.chip_fixed_loss.clear();
    }

    pub fn has_chip_fixed_loss(&self) -> bool {
        self.chip_fixed_loss.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chip_fixed_loss(&mut self, v: SSL_BallModelChipFixedLoss) {
        self.chip_fixed_loss = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chip_fixed_loss(&mut self) -> &mut SSL_BallModelChipFixedLoss {
        if self.chip_fixed_loss.is_none() {
            self.chip_fixed_loss.set_default();
        }
        self.chip_fixed_loss.as_mut().unwrap()
    }

    // Take field
    pub fn take_chip_fixed_loss(&mut self) -> SSL_BallModelChipFixedLoss {
        self.chip_fixed_loss.take().unwrap_or_else(|| SSL_BallModelChipFixedLoss::new())
    }
}

impl ::protobuf::Message for SSL_GeometryModels {
    fn is_initialized(&self) -> bool {
        for v in &self.straight_two_phase {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chip_fixed_loss {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.straight_two_phase)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chip_fixed_loss)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.straight_two_phase.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.chip_fixed_loss.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.straight_two_phase.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.chip_fixed_loss.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryModels {
        SSL_GeometryModels::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_BallModelStraightTwoPhase>>(
                "straight_two_phase",
                |m: &SSL_GeometryModels| { &m.straight_two_phase },
                |m: &mut SSL_GeometryModels| { &mut m.straight_two_phase },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_BallModelChipFixedLoss>>(
                "chip_fixed_loss",
                |m: &SSL_GeometryModels| { &m.chip_fixed_loss },
                |m: &mut SSL_GeometryModels| { &mut m.chip_fixed_loss },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_GeometryModels>(
                "SSL_GeometryModels",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_GeometryModels {
        static instance: ::protobuf::rt::LazyV2<SSL_GeometryModels> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_GeometryModels::new)
    }
}

impl ::protobuf::Clear for SSL_GeometryModels {
    fn clear(&mut self) {
        self.straight_two_phase.clear();
        self.chip_fixed_loss.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryModels {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryModels {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SSL_GeometryData {
    // message fields
    pub field: ::protobuf::SingularPtrField<SSL_GeometryFieldSize>,
    pub calib: ::protobuf::RepeatedField<SSL_GeometryCameraCalibration>,
    pub models: ::protobuf::SingularPtrField<SSL_GeometryModels>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SSL_GeometryData {
    fn default() -> &'a SSL_GeometryData {
        <SSL_GeometryData as ::protobuf::Message>::default_instance()
    }
}

impl SSL_GeometryData {
    pub fn new() -> SSL_GeometryData {
        ::std::default::Default::default()
    }

    // required .SSL_GeometryFieldSize field = 1;


    pub fn get_field(&self) -> &SSL_GeometryFieldSize {
        self.field.as_ref().unwrap_or_else(|| <SSL_GeometryFieldSize as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    pub fn has_field(&self) -> bool {
        self.field.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: SSL_GeometryFieldSize) {
        self.field = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut SSL_GeometryFieldSize {
        if self.field.is_none() {
            self.field.set_default();
        }
        self.field.as_mut().unwrap()
    }

    // Take field
    pub fn take_field(&mut self) -> SSL_GeometryFieldSize {
        self.field.take().unwrap_or_else(|| SSL_GeometryFieldSize::new())
    }

    // repeated .SSL_GeometryCameraCalibration calib = 2;


    pub fn get_calib(&self) -> &[SSL_GeometryCameraCalibration] {
        &self.calib
    }
    pub fn clear_calib(&mut self) {
        self.calib.clear();
    }

    // Param is passed by value, moved
    pub fn set_calib(&mut self, v: ::protobuf::RepeatedField<SSL_GeometryCameraCalibration>) {
        self.calib = v;
    }

    // Mutable pointer to the field.
    pub fn mut_calib(&mut self) -> &mut ::protobuf::RepeatedField<SSL_GeometryCameraCalibration> {
        &mut self.calib
    }

    // Take field
    pub fn take_calib(&mut self) -> ::protobuf::RepeatedField<SSL_GeometryCameraCalibration> {
        ::std::mem::replace(&mut self.calib, ::protobuf::RepeatedField::new())
    }

    // optional .SSL_GeometryModels models = 3;


    pub fn get_models(&self) -> &SSL_GeometryModels {
        self.models.as_ref().unwrap_or_else(|| <SSL_GeometryModels as ::protobuf::Message>::default_instance())
    }
    pub fn clear_models(&mut self) {
        self.models.clear();
    }

    pub fn has_models(&self) -> bool {
        self.models.is_some()
    }

    // Param is passed by value, moved
    pub fn set_models(&mut self, v: SSL_GeometryModels) {
        self.models = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_models(&mut self) -> &mut SSL_GeometryModels {
        if self.models.is_none() {
            self.models.set_default();
        }
        self.models.as_mut().unwrap()
    }

    // Take field
    pub fn take_models(&mut self) -> SSL_GeometryModels {
        self.models.take().unwrap_or_else(|| SSL_GeometryModels::new())
    }
}

impl ::protobuf::Message for SSL_GeometryData {
    fn is_initialized(&self) -> bool {
        if self.field.is_none() {
            return false;
        }
        for v in &self.field {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.calib {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.models {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.calib)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.models)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.calib {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.models.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.calib {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.models.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SSL_GeometryData {
        SSL_GeometryData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_GeometryFieldSize>>(
                "field",
                |m: &SSL_GeometryData| { &m.field },
                |m: &mut SSL_GeometryData| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_GeometryCameraCalibration>>(
                "calib",
                |m: &SSL_GeometryData| { &m.calib },
                |m: &mut SSL_GeometryData| { &mut m.calib },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SSL_GeometryModels>>(
                "models",
                |m: &SSL_GeometryData| { &m.models },
                |m: &mut SSL_GeometryData| { &mut m.models },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SSL_GeometryData>(
                "SSL_GeometryData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SSL_GeometryData {
        static instance: ::protobuf::rt::LazyV2<SSL_GeometryData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SSL_GeometryData::new)
    }
}

impl ::protobuf::Clear for SSL_GeometryData {
    fn clear(&mut self) {
        self.field.clear();
        self.calib.clear();
        self.models.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SSL_GeometryData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_GeometryData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SSL_FieldShapeType {
    Undefined = 0,
    CenterCircle = 1,
    TopTouchLine = 2,
    BottomTouchLine = 3,
    LeftGoalLine = 4,
    RightGoalLine = 5,
    HalfwayLine = 6,
    CenterLine = 7,
    LeftPenaltyStretch = 8,
    RightPenaltyStretch = 9,
    LeftFieldLeftPenaltyStretch = 10,
    LeftFieldRightPenaltyStretch = 11,
    RightFieldLeftPenaltyStretch = 12,
    RightFieldRightPenaltyStretch = 13,
}

impl ::protobuf::ProtobufEnum for SSL_FieldShapeType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SSL_FieldShapeType> {
        match value {
            0 => ::std::option::Option::Some(SSL_FieldShapeType::Undefined),
            1 => ::std::option::Option::Some(SSL_FieldShapeType::CenterCircle),
            2 => ::std::option::Option::Some(SSL_FieldShapeType::TopTouchLine),
            3 => ::std::option::Option::Some(SSL_FieldShapeType::BottomTouchLine),
            4 => ::std::option::Option::Some(SSL_FieldShapeType::LeftGoalLine),
            5 => ::std::option::Option::Some(SSL_FieldShapeType::RightGoalLine),
            6 => ::std::option::Option::Some(SSL_FieldShapeType::HalfwayLine),
            7 => ::std::option::Option::Some(SSL_FieldShapeType::CenterLine),
            8 => ::std::option::Option::Some(SSL_FieldShapeType::LeftPenaltyStretch),
            9 => ::std::option::Option::Some(SSL_FieldShapeType::RightPenaltyStretch),
            10 => ::std::option::Option::Some(SSL_FieldShapeType::LeftFieldLeftPenaltyStretch),
            11 => ::std::option::Option::Some(SSL_FieldShapeType::LeftFieldRightPenaltyStretch),
            12 => ::std::option::Option::Some(SSL_FieldShapeType::RightFieldLeftPenaltyStretch),
            13 => ::std::option::Option::Some(SSL_FieldShapeType::RightFieldRightPenaltyStretch),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SSL_FieldShapeType] = &[
            SSL_FieldShapeType::Undefined,
            SSL_FieldShapeType::CenterCircle,
            SSL_FieldShapeType::TopTouchLine,
            SSL_FieldShapeType::BottomTouchLine,
            SSL_FieldShapeType::LeftGoalLine,
            SSL_FieldShapeType::RightGoalLine,
            SSL_FieldShapeType::HalfwayLine,
            SSL_FieldShapeType::CenterLine,
            SSL_FieldShapeType::LeftPenaltyStretch,
            SSL_FieldShapeType::RightPenaltyStretch,
            SSL_FieldShapeType::LeftFieldLeftPenaltyStretch,
            SSL_FieldShapeType::LeftFieldRightPenaltyStretch,
            SSL_FieldShapeType::RightFieldLeftPenaltyStretch,
            SSL_FieldShapeType::RightFieldRightPenaltyStretch,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SSL_FieldShapeType>("SSL_FieldShapeType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SSL_FieldShapeType {
}

impl ::std::default::Default for SSL_FieldShapeType {
    fn default() -> Self {
        SSL_FieldShapeType::Undefined
    }
}

impl ::protobuf::reflect::ProtobufValue for SSL_FieldShapeType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#messages_robocup_ssl_geometry.proto\",\n\x08Vector2f\x12\x0e\n\x01x\
    \x18\x01\x20\x02(\x02R\x01xB\0\x12\x0e\n\x01y\x18\x02\x20\x02(\x02R\x01y\
    B\0:\0\"\xb3\x01\n\x14SSL_FieldLineSegment\x12\x14\n\x04name\x18\x01\x20\
    \x02(\tR\x04nameB\0\x12\x1b\n\x02p1\x18\x02\x20\x02(\x0b2\t.Vector2fR\
    \x02p1B\0\x12\x1b\n\x02p2\x18\x03\x20\x02(\x0b2\t.Vector2fR\x02p2B\0\x12\
    \x1e\n\tthickness\x18\x04\x20\x02(\x02R\tthicknessB\0\x12)\n\x04type\x18\
    \x05\x20\x01(\x0e2\x13.SSL_FieldShapeTypeR\x04typeB\0:\0\"\xdc\x01\n\x14\
    SSL_FieldCircularArc\x12\x14\n\x04name\x18\x01\x20\x02(\tR\x04nameB\0\
    \x12#\n\x06center\x18\x02\x20\x02(\x0b2\t.Vector2fR\x06centerB\0\x12\x18\
    \n\x06radius\x18\x03\x20\x02(\x02R\x06radiusB\0\x12\x10\n\x02a1\x18\x04\
    \x20\x02(\x02R\x02a1B\0\x12\x10\n\x02a2\x18\x05\x20\x02(\x02R\x02a2B\0\
    \x12\x1e\n\tthickness\x18\x06\x20\x02(\x02R\tthicknessB\0\x12)\n\x04type\
    \x18\x07\x20\x01(\x0e2\x13.SSL_FieldShapeTypeR\x04typeB\0:\0\"\xad\x05\n\
    \x15SSL_GeometryFieldSize\x12#\n\x0cfield_length\x18\x01\x20\x02(\x05R\
    \x0bfieldLengthB\0\x12!\n\x0bfield_width\x18\x02\x20\x02(\x05R\nfieldWid\
    thB\0\x12\x1f\n\ngoal_width\x18\x03\x20\x02(\x05R\tgoalWidthB\0\x12\x1f\
    \n\ngoal_depth\x18\x04\x20\x02(\x05R\tgoalDepthB\0\x12'\n\x0eboundary_wi\
    dth\x18\x05\x20\x02(\x05R\rboundaryWidthB\0\x128\n\x0bfield_lines\x18\
    \x06\x20\x03(\x0b2\x15.SSL_FieldLineSegmentR\nfieldLinesB\0\x126\n\nfiel\
    d_arcs\x18\x07\x20\x03(\x0b2\x15.SSL_FieldCircularArcR\tfieldArcsB\0\x12\
    .\n\x12penalty_area_depth\x18\x08\x20\x01(\x05R\x10penaltyAreaDepthB\0\
    \x12.\n\x12penalty_area_width\x18\t\x20\x01(\x05R\x10penaltyAreaWidthB\0\
    \x122\n\x14center_circle_radius\x18\n\x20\x01(\x05R\x12centerCircleRadiu\
    sB\0\x12'\n\x0eline_thickness\x18\x0b\x20\x01(\x05R\rlineThicknessB\0\
    \x12>\n\x1bgoal_center_to_penalty_mark\x18\x0c\x20\x01(\x05R\x17goalCent\
    erToPenaltyMarkB\0\x12!\n\x0bgoal_height\x18\r\x20\x01(\x05R\ngoalHeight\
    B\0\x12!\n\x0bball_radius\x18\x0e\x20\x01(\x02R\nballRadiusB\0\x12*\n\
    \x10max_robot_radius\x18\x0f\x20\x01(\x02R\x0emaxRobotRadiusB\0:\0\"\xea\
    \x04\n\x1dSSL_GeometryCameraCalibration\x12\x1d\n\tcamera_id\x18\x01\x20\
    \x02(\rR\x08cameraIdB\0\x12#\n\x0cfocal_length\x18\x02\x20\x02(\x02R\x0b\
    focalLengthB\0\x12,\n\x11principal_point_x\x18\x03\x20\x02(\x02R\x0fprin\
    cipalPointXB\0\x12,\n\x11principal_point_y\x18\x04\x20\x02(\x02R\x0fprin\
    cipalPointYB\0\x12\x20\n\ndistortion\x18\x05\x20\x02(\x02R\ndistortionB\
    \0\x12\x10\n\x02q0\x18\x06\x20\x02(\x02R\x02q0B\0\x12\x10\n\x02q1\x18\
    \x07\x20\x02(\x02R\x02q1B\0\x12\x10\n\x02q2\x18\x08\x20\x02(\x02R\x02q2B\
    \0\x12\x10\n\x02q3\x18\t\x20\x02(\x02R\x02q3B\0\x12\x10\n\x02tx\x18\n\
    \x20\x02(\x02R\x02txB\0\x12\x10\n\x02ty\x18\x0b\x20\x02(\x02R\x02tyB\0\
    \x12\x10\n\x02tz\x18\x0c\x20\x02(\x02R\x02tzB\0\x127\n\x17derived_camera\
    _world_tx\x18\r\x20\x01(\x02R\x14derivedCameraWorldTxB\0\x127\n\x17deriv\
    ed_camera_world_ty\x18\x0e\x20\x01(\x02R\x14derivedCameraWorldTyB\0\x127\
    \n\x17derived_camera_world_tz\x18\x0f\x20\x01(\x02R\x14derivedCameraWorl\
    dTzB\0\x12,\n\x11pixel_image_width\x18\x10\x20\x01(\rR\x0fpixelImageWidt\
    hB\0\x12.\n\x12pixel_image_height\x18\x11\x20\x01(\rR\x10pixelImageHeigh\
    tB\0:\0\"z\n\x1dSSL_BallModelStraightTwoPhase\x12\x1d\n\tacc_slide\x18\
    \x01\x20\x02(\x01R\x08accSlideB\0\x12\x1b\n\x08acc_roll\x18\x02\x20\x02(\
    \x01R\x07accRollB\0\x12\x1b\n\x08k_switch\x18\x03\x20\x02(\x01R\x07kSwit\
    chB\0:\0\"\xa5\x01\n\x1aSSL_BallModelChipFixedLoss\x121\n\x14damping_xy_\
    first_hop\x18\x01\x20\x02(\x01R\x11dampingXyFirstHopB\0\x123\n\x15dampin\
    g_xy_other_hops\x18\x02\x20\x02(\x01R\x12dampingXyOtherHopsB\0\x12\x1d\n\
    \tdamping_z\x18\x03\x20\x02(\x01R\x08dampingZB\0:\0\"\xad\x01\n\x12SSL_G\
    eometryModels\x12N\n\x12straight_two_phase\x18\x01\x20\x01(\x0b2\x1e.SSL\
    _BallModelStraightTwoPhaseR\x10straightTwoPhaseB\0\x12E\n\x0fchip_fixed_\
    loss\x18\x02\x20\x01(\x0b2\x1b.SSL_BallModelChipFixedLossR\rchipFixedLos\
    sB\0:\0\"\xab\x01\n\x10SSL_GeometryData\x12.\n\x05field\x18\x01\x20\x02(\
    \x0b2\x16.SSL_GeometryFieldSizeR\x05fieldB\0\x126\n\x05calib\x18\x02\x20\
    \x03(\x0b2\x1e.SSL_GeometryCameraCalibrationR\x05calibB\0\x12-\n\x06mode\
    ls\x18\x03\x20\x01(\x0b2\x13.SSL_GeometryModelsR\x06modelsB\0:\0*\xdd\
    \x02\n\x12SSL_FieldShapeType\x12\r\n\tUndefined\x10\0\x12\x10\n\x0cCente\
    rCircle\x10\x01\x12\x10\n\x0cTopTouchLine\x10\x02\x12\x13\n\x0fBottomTou\
    chLine\x10\x03\x12\x10\n\x0cLeftGoalLine\x10\x04\x12\x11\n\rRightGoalLin\
    e\x10\x05\x12\x0f\n\x0bHalfwayLine\x10\x06\x12\x0e\n\nCenterLine\x10\x07\
    \x12\x16\n\x12LeftPenaltyStretch\x10\x08\x12\x17\n\x13RightPenaltyStretc\
    h\x10\t\x12\x1f\n\x1bLeftFieldLeftPenaltyStretch\x10\n\x12\x20\n\x1cLeft\
    FieldRightPenaltyStretch\x10\x0b\x12\x20\n\x1cRightFieldLeftPenaltyStret\
    ch\x10\x0c\x12!\n\x1dRightFieldRightPenaltyStretch\x10\r\x1a\0B\0b\x06pr\
    oto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
