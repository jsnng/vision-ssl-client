// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `messages_robocup_ssl_detection_tracked.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Vector2 {
    // message fields
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vector2 {
    fn default() -> &'a Vector2 {
        <Vector2 as ::protobuf::Message>::default_instance()
    }
}

impl Vector2 {
    pub fn new() -> Vector2 {
        ::std::default::Default::default()
    }

    // required float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Vector2 {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vector2 {
        Vector2::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &Vector2| { &m.x },
                |m: &mut Vector2| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &Vector2| { &m.y },
                |m: &mut Vector2| { &mut m.y },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vector2>(
                "Vector2",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vector2 {
        static instance: ::protobuf::rt::LazyV2<Vector2> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vector2::new)
    }
}

impl ::protobuf::Clear for Vector2 {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vector2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector2 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Vector3 {
    // message fields
    x: ::std::option::Option<f32>,
    y: ::std::option::Option<f32>,
    z: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vector3 {
    fn default() -> &'a Vector3 {
        <Vector3 as ::protobuf::Message>::default_instance()
    }
}

impl Vector3 {
    pub fn new() -> Vector3 {
        ::std::default::Default::default()
    }

    // required float x = 1;


    pub fn get_x(&self) -> f32 {
        self.x.unwrap_or(0.)
    }
    pub fn clear_x(&mut self) {
        self.x = ::std::option::Option::None;
    }

    pub fn has_x(&self) -> bool {
        self.x.is_some()
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = ::std::option::Option::Some(v);
    }

    // required float y = 2;


    pub fn get_y(&self) -> f32 {
        self.y.unwrap_or(0.)
    }
    pub fn clear_y(&mut self) {
        self.y = ::std::option::Option::None;
    }

    pub fn has_y(&self) -> bool {
        self.y.is_some()
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = ::std::option::Option::Some(v);
    }

    // required float z = 3;


    pub fn get_z(&self) -> f32 {
        self.z.unwrap_or(0.)
    }
    pub fn clear_z(&mut self) {
        self.z = ::std::option::Option::None;
    }

    pub fn has_z(&self) -> bool {
        self.z.is_some()
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: f32) {
        self.z = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Vector3 {
    fn is_initialized(&self) -> bool {
        if self.x.is_none() {
            return false;
        }
        if self.y.is_none() {
            return false;
        }
        if self.z.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.x {
            my_size += 5;
        }
        if let Some(v) = self.y {
            my_size += 5;
        }
        if let Some(v) = self.z {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.x {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.y {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.z {
            os.write_float(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vector3 {
        Vector3::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &Vector3| { &m.x },
                |m: &mut Vector3| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &Vector3| { &m.y },
                |m: &mut Vector3| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "z",
                |m: &Vector3| { &m.z },
                |m: &mut Vector3| { &mut m.z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vector3>(
                "Vector3",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vector3 {
        static instance: ::protobuf::rt::LazyV2<Vector3> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vector3::new)
    }
}

impl ::protobuf::Clear for Vector3 {
    fn clear(&mut self) {
        self.x = ::std::option::Option::None;
        self.y = ::std::option::Option::None;
        self.z = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vector3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector3 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RobotId {
    // message fields
    id: ::std::option::Option<u32>,
    team_color: ::std::option::Option<TeamColor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RobotId {
    fn default() -> &'a RobotId {
        <RobotId as ::protobuf::Message>::default_instance()
    }
}

impl RobotId {
    pub fn new() -> RobotId {
        ::std::default::Default::default()
    }

    // required uint32 id = 1;


    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }
    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // required .TeamColor team_color = 2;


    pub fn get_team_color(&self) -> TeamColor {
        self.team_color.unwrap_or(TeamColor::TEAM_COLOR_UNKNOWN)
    }
    pub fn clear_team_color(&mut self) {
        self.team_color = ::std::option::Option::None;
    }

    pub fn has_team_color(&self) -> bool {
        self.team_color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_team_color(&mut self, v: TeamColor) {
        self.team_color = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for RobotId {
    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.team_color.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.team_color, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.team_color {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.team_color {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RobotId {
        RobotId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "id",
                |m: &RobotId| { &m.id },
                |m: &mut RobotId| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TeamColor>>(
                "team_color",
                |m: &RobotId| { &m.team_color },
                |m: &mut RobotId| { &mut m.team_color },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RobotId>(
                "RobotId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RobotId {
        static instance: ::protobuf::rt::LazyV2<RobotId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RobotId::new)
    }
}

impl ::protobuf::Clear for RobotId {
    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.team_color = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RobotId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RobotId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackedBall {
    // message fields
    pub pos: ::protobuf::SingularPtrField<Vector3>,
    pub vel: ::protobuf::SingularPtrField<Vector3>,
    visibility: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackedBall {
    fn default() -> &'a TrackedBall {
        <TrackedBall as ::protobuf::Message>::default_instance()
    }
}

impl TrackedBall {
    pub fn new() -> TrackedBall {
        ::std::default::Default::default()
    }

    // required .Vector3 pos = 1;


    pub fn get_pos(&self) -> &Vector3 {
        self.pos.as_ref().unwrap_or_else(|| <Vector3 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pos(&mut self) {
        self.pos.clear();
    }

    pub fn has_pos(&self) -> bool {
        self.pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pos(&mut self, v: Vector3) {
        self.pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pos(&mut self) -> &mut Vector3 {
        if self.pos.is_none() {
            self.pos.set_default();
        }
        self.pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_pos(&mut self) -> Vector3 {
        self.pos.take().unwrap_or_else(|| Vector3::new())
    }

    // optional .Vector3 vel = 2;


    pub fn get_vel(&self) -> &Vector3 {
        self.vel.as_ref().unwrap_or_else(|| <Vector3 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vel(&mut self) {
        self.vel.clear();
    }

    pub fn has_vel(&self) -> bool {
        self.vel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vel(&mut self, v: Vector3) {
        self.vel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vel(&mut self) -> &mut Vector3 {
        if self.vel.is_none() {
            self.vel.set_default();
        }
        self.vel.as_mut().unwrap()
    }

    // Take field
    pub fn take_vel(&mut self) -> Vector3 {
        self.vel.take().unwrap_or_else(|| Vector3::new())
    }

    // optional float visibility = 3;


    pub fn get_visibility(&self) -> f32 {
        self.visibility.unwrap_or(0.)
    }
    pub fn clear_visibility(&mut self) {
        self.visibility = ::std::option::Option::None;
    }

    pub fn has_visibility(&self) -> bool {
        self.visibility.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: f32) {
        self.visibility = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TrackedBall {
    fn is_initialized(&self) -> bool {
        if self.pos.is_none() {
            return false;
        }
        for v in &self.pos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vel {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pos)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vel)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.visibility = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.visibility {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pos.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vel.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.visibility {
            os.write_float(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackedBall {
        TrackedBall::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector3>>(
                "pos",
                |m: &TrackedBall| { &m.pos },
                |m: &mut TrackedBall| { &mut m.pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector3>>(
                "vel",
                |m: &TrackedBall| { &m.vel },
                |m: &mut TrackedBall| { &mut m.vel },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "visibility",
                |m: &TrackedBall| { &m.visibility },
                |m: &mut TrackedBall| { &mut m.visibility },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackedBall>(
                "TrackedBall",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackedBall {
        static instance: ::protobuf::rt::LazyV2<TrackedBall> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackedBall::new)
    }
}

impl ::protobuf::Clear for TrackedBall {
    fn clear(&mut self) {
        self.pos.clear();
        self.vel.clear();
        self.visibility = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackedBall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackedBall {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KickedBall {
    // message fields
    pub pos: ::protobuf::SingularPtrField<Vector2>,
    pub vel: ::protobuf::SingularPtrField<Vector3>,
    start_timestamp: ::std::option::Option<f64>,
    stop_timestamp: ::std::option::Option<f64>,
    pub stop_pos: ::protobuf::SingularPtrField<Vector2>,
    pub robot_id: ::protobuf::SingularPtrField<RobotId>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KickedBall {
    fn default() -> &'a KickedBall {
        <KickedBall as ::protobuf::Message>::default_instance()
    }
}

impl KickedBall {
    pub fn new() -> KickedBall {
        ::std::default::Default::default()
    }

    // required .Vector2 pos = 1;


    pub fn get_pos(&self) -> &Vector2 {
        self.pos.as_ref().unwrap_or_else(|| <Vector2 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pos(&mut self) {
        self.pos.clear();
    }

    pub fn has_pos(&self) -> bool {
        self.pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pos(&mut self, v: Vector2) {
        self.pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pos(&mut self) -> &mut Vector2 {
        if self.pos.is_none() {
            self.pos.set_default();
        }
        self.pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_pos(&mut self) -> Vector2 {
        self.pos.take().unwrap_or_else(|| Vector2::new())
    }

    // required .Vector3 vel = 2;


    pub fn get_vel(&self) -> &Vector3 {
        self.vel.as_ref().unwrap_or_else(|| <Vector3 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vel(&mut self) {
        self.vel.clear();
    }

    pub fn has_vel(&self) -> bool {
        self.vel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vel(&mut self, v: Vector3) {
        self.vel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vel(&mut self) -> &mut Vector3 {
        if self.vel.is_none() {
            self.vel.set_default();
        }
        self.vel.as_mut().unwrap()
    }

    // Take field
    pub fn take_vel(&mut self) -> Vector3 {
        self.vel.take().unwrap_or_else(|| Vector3::new())
    }

    // required double start_timestamp = 3;


    pub fn get_start_timestamp(&self) -> f64 {
        self.start_timestamp.unwrap_or(0.)
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp = ::std::option::Option::None;
    }

    pub fn has_start_timestamp(&self) -> bool {
        self.start_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: f64) {
        self.start_timestamp = ::std::option::Option::Some(v);
    }

    // optional double stop_timestamp = 4;


    pub fn get_stop_timestamp(&self) -> f64 {
        self.stop_timestamp.unwrap_or(0.)
    }
    pub fn clear_stop_timestamp(&mut self) {
        self.stop_timestamp = ::std::option::Option::None;
    }

    pub fn has_stop_timestamp(&self) -> bool {
        self.stop_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_timestamp(&mut self, v: f64) {
        self.stop_timestamp = ::std::option::Option::Some(v);
    }

    // optional .Vector2 stop_pos = 5;


    pub fn get_stop_pos(&self) -> &Vector2 {
        self.stop_pos.as_ref().unwrap_or_else(|| <Vector2 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stop_pos(&mut self) {
        self.stop_pos.clear();
    }

    pub fn has_stop_pos(&self) -> bool {
        self.stop_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stop_pos(&mut self, v: Vector2) {
        self.stop_pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stop_pos(&mut self) -> &mut Vector2 {
        if self.stop_pos.is_none() {
            self.stop_pos.set_default();
        }
        self.stop_pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_stop_pos(&mut self) -> Vector2 {
        self.stop_pos.take().unwrap_or_else(|| Vector2::new())
    }

    // optional .RobotId robot_id = 6;


    pub fn get_robot_id(&self) -> &RobotId {
        self.robot_id.as_ref().unwrap_or_else(|| <RobotId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_robot_id(&mut self) {
        self.robot_id.clear();
    }

    pub fn has_robot_id(&self) -> bool {
        self.robot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_robot_id(&mut self, v: RobotId) {
        self.robot_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_robot_id(&mut self) -> &mut RobotId {
        if self.robot_id.is_none() {
            self.robot_id.set_default();
        }
        self.robot_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_robot_id(&mut self) -> RobotId {
        self.robot_id.take().unwrap_or_else(|| RobotId::new())
    }
}

impl ::protobuf::Message for KickedBall {
    fn is_initialized(&self) -> bool {
        if self.pos.is_none() {
            return false;
        }
        if self.vel.is_none() {
            return false;
        }
        if self.start_timestamp.is_none() {
            return false;
        }
        for v in &self.pos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vel {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stop_pos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.robot_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pos)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vel)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.start_timestamp = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.stop_timestamp = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stop_pos)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.robot_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.vel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.start_timestamp {
            my_size += 9;
        }
        if let Some(v) = self.stop_timestamp {
            my_size += 9;
        }
        if let Some(ref v) = self.stop_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.robot_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pos.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.vel.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.start_timestamp {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.stop_timestamp {
            os.write_double(4, v)?;
        }
        if let Some(ref v) = self.stop_pos.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.robot_id.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KickedBall {
        KickedBall::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2>>(
                "pos",
                |m: &KickedBall| { &m.pos },
                |m: &mut KickedBall| { &mut m.pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector3>>(
                "vel",
                |m: &KickedBall| { &m.vel },
                |m: &mut KickedBall| { &mut m.vel },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "start_timestamp",
                |m: &KickedBall| { &m.start_timestamp },
                |m: &mut KickedBall| { &mut m.start_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "stop_timestamp",
                |m: &KickedBall| { &m.stop_timestamp },
                |m: &mut KickedBall| { &mut m.stop_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2>>(
                "stop_pos",
                |m: &KickedBall| { &m.stop_pos },
                |m: &mut KickedBall| { &mut m.stop_pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RobotId>>(
                "robot_id",
                |m: &KickedBall| { &m.robot_id },
                |m: &mut KickedBall| { &mut m.robot_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KickedBall>(
                "KickedBall",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KickedBall {
        static instance: ::protobuf::rt::LazyV2<KickedBall> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KickedBall::new)
    }
}

impl ::protobuf::Clear for KickedBall {
    fn clear(&mut self) {
        self.pos.clear();
        self.vel.clear();
        self.start_timestamp = ::std::option::Option::None;
        self.stop_timestamp = ::std::option::Option::None;
        self.stop_pos.clear();
        self.robot_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KickedBall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KickedBall {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackedRobot {
    // message fields
    pub robot_id: ::protobuf::SingularPtrField<RobotId>,
    pub pos: ::protobuf::SingularPtrField<Vector2>,
    orientation: ::std::option::Option<f32>,
    pub vel: ::protobuf::SingularPtrField<Vector2>,
    vel_angular: ::std::option::Option<f32>,
    visibility: ::std::option::Option<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackedRobot {
    fn default() -> &'a TrackedRobot {
        <TrackedRobot as ::protobuf::Message>::default_instance()
    }
}

impl TrackedRobot {
    pub fn new() -> TrackedRobot {
        ::std::default::Default::default()
    }

    // required .RobotId robot_id = 1;


    pub fn get_robot_id(&self) -> &RobotId {
        self.robot_id.as_ref().unwrap_or_else(|| <RobotId as ::protobuf::Message>::default_instance())
    }
    pub fn clear_robot_id(&mut self) {
        self.robot_id.clear();
    }

    pub fn has_robot_id(&self) -> bool {
        self.robot_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_robot_id(&mut self, v: RobotId) {
        self.robot_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_robot_id(&mut self) -> &mut RobotId {
        if self.robot_id.is_none() {
            self.robot_id.set_default();
        }
        self.robot_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_robot_id(&mut self) -> RobotId {
        self.robot_id.take().unwrap_or_else(|| RobotId::new())
    }

    // required .Vector2 pos = 2;


    pub fn get_pos(&self) -> &Vector2 {
        self.pos.as_ref().unwrap_or_else(|| <Vector2 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pos(&mut self) {
        self.pos.clear();
    }

    pub fn has_pos(&self) -> bool {
        self.pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pos(&mut self, v: Vector2) {
        self.pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pos(&mut self) -> &mut Vector2 {
        if self.pos.is_none() {
            self.pos.set_default();
        }
        self.pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_pos(&mut self) -> Vector2 {
        self.pos.take().unwrap_or_else(|| Vector2::new())
    }

    // required float orientation = 3;


    pub fn get_orientation(&self) -> f32 {
        self.orientation.unwrap_or(0.)
    }
    pub fn clear_orientation(&mut self) {
        self.orientation = ::std::option::Option::None;
    }

    pub fn has_orientation(&self) -> bool {
        self.orientation.is_some()
    }

    // Param is passed by value, moved
    pub fn set_orientation(&mut self, v: f32) {
        self.orientation = ::std::option::Option::Some(v);
    }

    // optional .Vector2 vel = 4;


    pub fn get_vel(&self) -> &Vector2 {
        self.vel.as_ref().unwrap_or_else(|| <Vector2 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_vel(&mut self) {
        self.vel.clear();
    }

    pub fn has_vel(&self) -> bool {
        self.vel.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vel(&mut self, v: Vector2) {
        self.vel = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vel(&mut self) -> &mut Vector2 {
        if self.vel.is_none() {
            self.vel.set_default();
        }
        self.vel.as_mut().unwrap()
    }

    // Take field
    pub fn take_vel(&mut self) -> Vector2 {
        self.vel.take().unwrap_or_else(|| Vector2::new())
    }

    // optional float vel_angular = 5;


    pub fn get_vel_angular(&self) -> f32 {
        self.vel_angular.unwrap_or(0.)
    }
    pub fn clear_vel_angular(&mut self) {
        self.vel_angular = ::std::option::Option::None;
    }

    pub fn has_vel_angular(&self) -> bool {
        self.vel_angular.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vel_angular(&mut self, v: f32) {
        self.vel_angular = ::std::option::Option::Some(v);
    }

    // optional float visibility = 6;


    pub fn get_visibility(&self) -> f32 {
        self.visibility.unwrap_or(0.)
    }
    pub fn clear_visibility(&mut self) {
        self.visibility = ::std::option::Option::None;
    }

    pub fn has_visibility(&self) -> bool {
        self.visibility.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visibility(&mut self, v: f32) {
        self.visibility = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for TrackedRobot {
    fn is_initialized(&self) -> bool {
        if self.robot_id.is_none() {
            return false;
        }
        if self.pos.is_none() {
            return false;
        }
        if self.orientation.is_none() {
            return false;
        }
        for v in &self.robot_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vel {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.robot_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pos)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.orientation = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vel)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vel_angular = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.visibility = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.robot_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.orientation {
            my_size += 5;
        }
        if let Some(ref v) = self.vel.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.vel_angular {
            my_size += 5;
        }
        if let Some(v) = self.visibility {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.robot_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.orientation {
            os.write_float(3, v)?;
        }
        if let Some(ref v) = self.vel.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.vel_angular {
            os.write_float(5, v)?;
        }
        if let Some(v) = self.visibility {
            os.write_float(6, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackedRobot {
        TrackedRobot::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RobotId>>(
                "robot_id",
                |m: &TrackedRobot| { &m.robot_id },
                |m: &mut TrackedRobot| { &mut m.robot_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2>>(
                "pos",
                |m: &TrackedRobot| { &m.pos },
                |m: &mut TrackedRobot| { &mut m.pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "orientation",
                |m: &TrackedRobot| { &m.orientation },
                |m: &mut TrackedRobot| { &mut m.orientation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Vector2>>(
                "vel",
                |m: &TrackedRobot| { &m.vel },
                |m: &mut TrackedRobot| { &mut m.vel },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vel_angular",
                |m: &TrackedRobot| { &m.vel_angular },
                |m: &mut TrackedRobot| { &mut m.vel_angular },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "visibility",
                |m: &TrackedRobot| { &m.visibility },
                |m: &mut TrackedRobot| { &mut m.visibility },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackedRobot>(
                "TrackedRobot",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackedRobot {
        static instance: ::protobuf::rt::LazyV2<TrackedRobot> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackedRobot::new)
    }
}

impl ::protobuf::Clear for TrackedRobot {
    fn clear(&mut self) {
        self.robot_id.clear();
        self.pos.clear();
        self.orientation = ::std::option::Option::None;
        self.vel.clear();
        self.vel_angular = ::std::option::Option::None;
        self.visibility = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackedRobot {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackedRobot {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackedFrame {
    // message fields
    frame_number: ::std::option::Option<u32>,
    timestamp: ::std::option::Option<f64>,
    pub balls: ::protobuf::RepeatedField<TrackedBall>,
    pub robots: ::protobuf::RepeatedField<TrackedRobot>,
    pub kicked_ball: ::protobuf::SingularPtrField<KickedBall>,
    pub capabilities: ::std::vec::Vec<Capability>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackedFrame {
    fn default() -> &'a TrackedFrame {
        <TrackedFrame as ::protobuf::Message>::default_instance()
    }
}

impl TrackedFrame {
    pub fn new() -> TrackedFrame {
        ::std::default::Default::default()
    }

    // required uint32 frame_number = 1;


    pub fn get_frame_number(&self) -> u32 {
        self.frame_number.unwrap_or(0)
    }
    pub fn clear_frame_number(&mut self) {
        self.frame_number = ::std::option::Option::None;
    }

    pub fn has_frame_number(&self) -> bool {
        self.frame_number.is_some()
    }

    // Param is passed by value, moved
    pub fn set_frame_number(&mut self, v: u32) {
        self.frame_number = ::std::option::Option::Some(v);
    }

    // required double timestamp = 2;


    pub fn get_timestamp(&self) -> f64 {
        self.timestamp.unwrap_or(0.)
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: f64) {
        self.timestamp = ::std::option::Option::Some(v);
    }

    // repeated .TrackedBall balls = 3;


    pub fn get_balls(&self) -> &[TrackedBall] {
        &self.balls
    }
    pub fn clear_balls(&mut self) {
        self.balls.clear();
    }

    // Param is passed by value, moved
    pub fn set_balls(&mut self, v: ::protobuf::RepeatedField<TrackedBall>) {
        self.balls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_balls(&mut self) -> &mut ::protobuf::RepeatedField<TrackedBall> {
        &mut self.balls
    }

    // Take field
    pub fn take_balls(&mut self) -> ::protobuf::RepeatedField<TrackedBall> {
        ::std::mem::replace(&mut self.balls, ::protobuf::RepeatedField::new())
    }

    // repeated .TrackedRobot robots = 4;


    pub fn get_robots(&self) -> &[TrackedRobot] {
        &self.robots
    }
    pub fn clear_robots(&mut self) {
        self.robots.clear();
    }

    // Param is passed by value, moved
    pub fn set_robots(&mut self, v: ::protobuf::RepeatedField<TrackedRobot>) {
        self.robots = v;
    }

    // Mutable pointer to the field.
    pub fn mut_robots(&mut self) -> &mut ::protobuf::RepeatedField<TrackedRobot> {
        &mut self.robots
    }

    // Take field
    pub fn take_robots(&mut self) -> ::protobuf::RepeatedField<TrackedRobot> {
        ::std::mem::replace(&mut self.robots, ::protobuf::RepeatedField::new())
    }

    // optional .KickedBall kicked_ball = 5;


    pub fn get_kicked_ball(&self) -> &KickedBall {
        self.kicked_ball.as_ref().unwrap_or_else(|| <KickedBall as ::protobuf::Message>::default_instance())
    }
    pub fn clear_kicked_ball(&mut self) {
        self.kicked_ball.clear();
    }

    pub fn has_kicked_ball(&self) -> bool {
        self.kicked_ball.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kicked_ball(&mut self, v: KickedBall) {
        self.kicked_ball = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kicked_ball(&mut self) -> &mut KickedBall {
        if self.kicked_ball.is_none() {
            self.kicked_ball.set_default();
        }
        self.kicked_ball.as_mut().unwrap()
    }

    // Take field
    pub fn take_kicked_ball(&mut self) -> KickedBall {
        self.kicked_ball.take().unwrap_or_else(|| KickedBall::new())
    }

    // repeated .Capability capabilities = 6;


    pub fn get_capabilities(&self) -> &[Capability] {
        &self.capabilities
    }
    pub fn clear_capabilities(&mut self) {
        self.capabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_capabilities(&mut self, v: ::std::vec::Vec<Capability>) {
        self.capabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_capabilities(&mut self) -> &mut ::std::vec::Vec<Capability> {
        &mut self.capabilities
    }

    // Take field
    pub fn take_capabilities(&mut self) -> ::std::vec::Vec<Capability> {
        ::std::mem::replace(&mut self.capabilities, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TrackedFrame {
    fn is_initialized(&self) -> bool {
        if self.frame_number.is_none() {
            return false;
        }
        if self.timestamp.is_none() {
            return false;
        }
        for v in &self.balls {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.robots {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.kicked_ball {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.frame_number = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.timestamp = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.balls)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.robots)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.kicked_ball)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.capabilities, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.frame_number {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.timestamp {
            my_size += 9;
        }
        for value in &self.balls {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.robots {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.kicked_ball.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.capabilities {
            my_size += ::protobuf::rt::enum_size(6, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.frame_number {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.timestamp {
            os.write_double(2, v)?;
        }
        for v in &self.balls {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.robots {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.kicked_ball.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.capabilities {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackedFrame {
        TrackedFrame::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "frame_number",
                |m: &TrackedFrame| { &m.frame_number },
                |m: &mut TrackedFrame| { &mut m.frame_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "timestamp",
                |m: &TrackedFrame| { &m.timestamp },
                |m: &mut TrackedFrame| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackedBall>>(
                "balls",
                |m: &TrackedFrame| { &m.balls },
                |m: &mut TrackedFrame| { &mut m.balls },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackedRobot>>(
                "robots",
                |m: &TrackedFrame| { &m.robots },
                |m: &mut TrackedFrame| { &mut m.robots },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KickedBall>>(
                "kicked_ball",
                |m: &TrackedFrame| { &m.kicked_ball },
                |m: &mut TrackedFrame| { &mut m.kicked_ball },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Capability>>(
                "capabilities",
                |m: &TrackedFrame| { &m.capabilities },
                |m: &mut TrackedFrame| { &mut m.capabilities },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackedFrame>(
                "TrackedFrame",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackedFrame {
        static instance: ::protobuf::rt::LazyV2<TrackedFrame> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackedFrame::new)
    }
}

impl ::protobuf::Clear for TrackedFrame {
    fn clear(&mut self) {
        self.frame_number = ::std::option::Option::None;
        self.timestamp = ::std::option::Option::None;
        self.balls.clear();
        self.robots.clear();
        self.kicked_ball.clear();
        self.capabilities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackedFrame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackedFrame {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TeamColor {
    TEAM_COLOR_UNKNOWN = 0,
    TEAM_COLOR_YELLOW = 1,
    TEAM_COLOR_BLUE = 2,
}

impl ::protobuf::ProtobufEnum for TeamColor {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TeamColor> {
        match value {
            0 => ::std::option::Option::Some(TeamColor::TEAM_COLOR_UNKNOWN),
            1 => ::std::option::Option::Some(TeamColor::TEAM_COLOR_YELLOW),
            2 => ::std::option::Option::Some(TeamColor::TEAM_COLOR_BLUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TeamColor] = &[
            TeamColor::TEAM_COLOR_UNKNOWN,
            TeamColor::TEAM_COLOR_YELLOW,
            TeamColor::TEAM_COLOR_BLUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TeamColor>("TeamColor", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TeamColor {
}

impl ::std::default::Default for TeamColor {
    fn default() -> Self {
        TeamColor::TEAM_COLOR_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for TeamColor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Capability {
    CAPABILITY_UNKNOWN = 0,
    CAPABILITY_DETECT_FLYING_BALLS = 1,
    CAPABILITY_DETECT_MULTIPLE_BALLS = 2,
    CAPABILITY_DETECT_KICKED_BALLS = 3,
}

impl ::protobuf::ProtobufEnum for Capability {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Capability> {
        match value {
            0 => ::std::option::Option::Some(Capability::CAPABILITY_UNKNOWN),
            1 => ::std::option::Option::Some(Capability::CAPABILITY_DETECT_FLYING_BALLS),
            2 => ::std::option::Option::Some(Capability::CAPABILITY_DETECT_MULTIPLE_BALLS),
            3 => ::std::option::Option::Some(Capability::CAPABILITY_DETECT_KICKED_BALLS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Capability] = &[
            Capability::CAPABILITY_UNKNOWN,
            Capability::CAPABILITY_DETECT_FLYING_BALLS,
            Capability::CAPABILITY_DETECT_MULTIPLE_BALLS,
            Capability::CAPABILITY_DETECT_KICKED_BALLS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Capability>("Capability", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Capability {
}

impl ::std::default::Default for Capability {
    fn default() -> Self {
        Capability::CAPABILITY_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Capability {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,messages_robocup_ssl_detection_tracked.proto\"+\n\x07Vector2\x12\x0e\
    \n\x01x\x18\x01\x20\x02(\x02R\x01xB\0\x12\x0e\n\x01y\x18\x02\x20\x02(\
    \x02R\x01yB\0:\0\";\n\x07Vector3\x12\x0e\n\x01x\x18\x01\x20\x02(\x02R\
    \x01xB\0\x12\x0e\n\x01y\x18\x02\x20\x02(\x02R\x01yB\0\x12\x0e\n\x01z\x18\
    \x03\x20\x02(\x02R\x01zB\0:\0\"J\n\x07RobotId\x12\x10\n\x02id\x18\x01\
    \x20\x02(\rR\x02idB\0\x12+\n\nteam_color\x18\x02\x20\x02(\x0e2\n.TeamCol\
    orR\tteamColorB\0:\0\"m\n\x0bTrackedBall\x12\x1c\n\x03pos\x18\x01\x20\
    \x02(\x0b2\x08.Vector3R\x03posB\0\x12\x1c\n\x03vel\x18\x02\x20\x01(\x0b2\
    \x08.Vector3R\x03velB\0\x12\x20\n\nvisibility\x18\x03\x20\x01(\x02R\nvis\
    ibilityB\0:\0\"\xec\x01\n\nKickedBall\x12\x1c\n\x03pos\x18\x01\x20\x02(\
    \x0b2\x08.Vector2R\x03posB\0\x12\x1c\n\x03vel\x18\x02\x20\x02(\x0b2\x08.\
    Vector3R\x03velB\0\x12)\n\x0fstart_timestamp\x18\x03\x20\x02(\x01R\x0est\
    artTimestampB\0\x12'\n\x0estop_timestamp\x18\x04\x20\x01(\x01R\rstopTime\
    stampB\0\x12%\n\x08stop_pos\x18\x05\x20\x01(\x0b2\x08.Vector2R\x07stopPo\
    sB\0\x12%\n\x08robot_id\x18\x06\x20\x01(\x0b2\x08.RobotIdR\x07robotIdB\0\
    :\0\"\xdc\x01\n\x0cTrackedRobot\x12%\n\x08robot_id\x18\x01\x20\x02(\x0b2\
    \x08.RobotIdR\x07robotIdB\0\x12\x1c\n\x03pos\x18\x02\x20\x02(\x0b2\x08.V\
    ector2R\x03posB\0\x12\"\n\x0borientation\x18\x03\x20\x02(\x02R\x0borient\
    ationB\0\x12\x1c\n\x03vel\x18\x04\x20\x01(\x0b2\x08.Vector2R\x03velB\0\
    \x12!\n\x0bvel_angular\x18\x05\x20\x01(\x02R\nvelAngularB\0\x12\x20\n\nv\
    isibility\x18\x06\x20\x01(\x02R\nvisibilityB\0:\0\"\x87\x02\n\x0cTracked\
    Frame\x12#\n\x0cframe_number\x18\x01\x20\x02(\rR\x0bframeNumberB\0\x12\
    \x1e\n\ttimestamp\x18\x02\x20\x02(\x01R\ttimestampB\0\x12$\n\x05balls\
    \x18\x03\x20\x03(\x0b2\x0c.TrackedBallR\x05ballsB\0\x12'\n\x06robots\x18\
    \x04\x20\x03(\x0b2\r.TrackedRobotR\x06robotsB\0\x12.\n\x0bkicked_ball\
    \x18\x05\x20\x01(\x0b2\x0b.KickedBallR\nkickedBallB\0\x121\n\x0ccapabili\
    ties\x18\x06\x20\x03(\x0e2\x0b.CapabilityR\x0ccapabilitiesB\0:\0*Q\n\tTe\
    amColor\x12\x16\n\x12TEAM_COLOR_UNKNOWN\x10\0\x12\x15\n\x11TEAM_COLOR_YE\
    LLOW\x10\x01\x12\x13\n\x0fTEAM_COLOR_BLUE\x10\x02\x1a\0*\x94\x01\n\nCapa\
    bility\x12\x16\n\x12CAPABILITY_UNKNOWN\x10\0\x12\"\n\x1eCAPABILITY_DETEC\
    T_FLYING_BALLS\x10\x01\x12$\n\x20CAPABILITY_DETECT_MULTIPLE_BALLS\x10\
    \x02\x12\"\n\x1eCAPABILITY_DETECT_KICKED_BALLS\x10\x03\x1a\0B\0b\x06prot\
    o2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
